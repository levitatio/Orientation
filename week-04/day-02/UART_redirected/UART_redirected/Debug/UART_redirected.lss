
UART_redirected.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00000348  000003dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000348  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800116  00800116  000003f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000424  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000090e  00000000  00000000  0000049c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007ed  00000000  00000000  00000daa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ac  00000000  00000000  00001597  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000098  00000000  00000000  00001844  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000453  00000000  00000000  000018dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000106  00000000  00000000  00001d2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001e35  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  58:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  5c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  60:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  64:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  68:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d4 e0       	ldi	r29, 0x04	; 4
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_copy_data>:
  78:	11 e0       	ldi	r17, 0x01	; 1
  7a:	a0 e0       	ldi	r26, 0x00	; 0
  7c:	b1 e0       	ldi	r27, 0x01	; 1
  7e:	e8 e4       	ldi	r30, 0x48	; 72
  80:	f3 e0       	ldi	r31, 0x03	; 3
  82:	02 c0       	rjmp	.+4      	; 0x88 <__do_copy_data+0x10>
  84:	05 90       	lpm	r0, Z+
  86:	0d 92       	st	X+, r0
  88:	a6 31       	cpi	r26, 0x16	; 22
  8a:	b1 07       	cpc	r27, r17
  8c:	d9 f7       	brne	.-10     	; 0x84 <__do_copy_data+0xc>

0000008e <__do_clear_bss>:
  8e:	21 e0       	ldi	r18, 0x01	; 1
  90:	a6 e1       	ldi	r26, 0x16	; 22
  92:	b1 e0       	ldi	r27, 0x01	; 1
  94:	01 c0       	rjmp	.+2      	; 0x98 <.do_clear_bss_start>

00000096 <.do_clear_bss_loop>:
  96:	1d 92       	st	X+, r1

00000098 <.do_clear_bss_start>:
  98:	ac 31       	cpi	r26, 0x1C	; 28
  9a:	b2 07       	cpc	r27, r18
  9c:	e1 f7       	brne	.-8      	; 0x96 <.do_clear_bss_loop>
  9e:	0e 94 b8 00 	call	0x170	; 0x170 <main>
  a2:	0c 94 a2 01 	jmp	0x344	; 0x344 <_exit>

000000a6 <__bad_interrupt>:
  a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <UART_Init>:

#define F_CPU	16000000	// This definition tells to _delay_ms() that the CPU runs at 16MHz
#include <util/delay.h>		// This header contains the _delay_ms() function

void UART_Init()
{
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	cd b7       	in	r28, 0x3d	; 61
  b0:	de b7       	in	r29, 0x3e	; 62
	// See the datasheet on page 246 for hints and table 25-9.
	//---------------------------------
	//TODO:
	// At first set the baud rate to 9600
	// The CPU clock frequency is 16MHz
	UBRR0 = 103;
  b2:	84 ec       	ldi	r24, 0xC4	; 196
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	27 e6       	ldi	r18, 0x67	; 103
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	fc 01       	movw	r30, r24
  bc:	31 83       	std	Z+1, r19	; 0x01
  be:	20 83       	st	Z, r18
	// Set the proper Baud rate
	UCSR0A = 0;
  c0:	80 ec       	ldi	r24, 0xC0	; 192
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	fc 01       	movw	r30, r24
  c6:	10 82       	st	Z, r1
	
	//TODO:
	// Set the following frame format: 8N1
	// Set the one stop bit
	UCSR0C |= (0 << USBS0);
  c8:	82 ec       	ldi	r24, 0xC2	; 194
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	22 ec       	ldi	r18, 0xC2	; 194
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	f9 01       	movw	r30, r18
  d2:	20 81       	ld	r18, Z
  d4:	fc 01       	movw	r30, r24
  d6:	20 83       	st	Z, r18
	// Set char size to 8 bit
	UCSR0C |= (0b11 << UCSZ00);
  d8:	82 ec       	ldi	r24, 0xC2	; 194
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	22 ec       	ldi	r18, 0xC2	; 194
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	f9 01       	movw	r30, r18
  e2:	20 81       	ld	r18, Z
  e4:	26 60       	ori	r18, 0x06	; 6
  e6:	fc 01       	movw	r30, r24
  e8:	20 83       	st	Z, r18
	
	//TODO:
	// Enable receiver and transmitter
	// Enable TX
	UCSR0B |= (1 << TXEN0);
  ea:	81 ec       	ldi	r24, 0xC1	; 193
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	21 ec       	ldi	r18, 0xC1	; 193
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	f9 01       	movw	r30, r18
  f4:	20 81       	ld	r18, Z
  f6:	28 60       	ori	r18, 0x08	; 8
  f8:	fc 01       	movw	r30, r24
  fa:	20 83       	st	Z, r18
	//TODO:
	// Enable RX
	UCSR0B |= (1 << RXEN0);
  fc:	81 ec       	ldi	r24, 0xC1	; 193
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	21 ec       	ldi	r18, 0xC1	; 193
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	f9 01       	movw	r30, r18
 106:	20 81       	ld	r18, Z
 108:	20 61       	ori	r18, 0x10	; 16
 10a:	fc 01       	movw	r30, r24
 10c:	20 83       	st	Z, r18
	
	// UDR0 will transmit and receive data
}
 10e:	00 00       	nop
 110:	df 91       	pop	r29
 112:	cf 91       	pop	r28
 114:	08 95       	ret

00000116 <UART_SendCharacter>:

void UART_SendCharacter(char character)
{
 116:	cf 93       	push	r28
 118:	df 93       	push	r29
 11a:	1f 92       	push	r1
 11c:	cd b7       	in	r28, 0x3d	; 61
 11e:	de b7       	in	r29, 0x3e	; 62
 120:	89 83       	std	Y+1, r24	; 0x01
	// Write this function, which can send a character through UART will polling method
	// See page 247 of the datasheet for hints, be aware that the code in the datasheet has a problem :)

	//TODO:
	// Wait for empty buffer
	while (!( UCSR0A & (1<<UDRE0))) { }
 122:	00 00       	nop
 124:	80 ec       	ldi	r24, 0xC0	; 192
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	fc 01       	movw	r30, r24
 12a:	80 81       	ld	r24, Z
 12c:	88 2f       	mov	r24, r24
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	80 72       	andi	r24, 0x20	; 32
 132:	99 27       	eor	r25, r25
 134:	89 2b       	or	r24, r25
 136:	b1 f3       	breq	.-20     	; 0x124 <UART_SendCharacter+0xe>
	//TODO:
	// Put data to buffer
	UDR0 = character;
 138:	86 ec       	ldi	r24, 0xC6	; 198
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	29 81       	ldd	r18, Y+1	; 0x01
 13e:	fc 01       	movw	r30, r24
 140:	20 83       	st	Z, r18
}
 142:	00 00       	nop
 144:	0f 90       	pop	r0
 146:	df 91       	pop	r29
 148:	cf 91       	pop	r28
 14a:	08 95       	ret

0000014c <UART_GetCharacter>:

char UART_GetCharacter()
{
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
 150:	cd b7       	in	r28, 0x3d	; 61
 152:	de b7       	in	r29, 0x3e	; 62
	// Write this function, which waits for a character and returns when one is received
	// See page 249 of the datasheet for hints, be aware that the code in the datasheet has a problem :)

	//TODO:
	// Wait for data received
	while (!(UCSR0A & (1<<RXC0))) {}
 154:	00 00       	nop
 156:	80 ec       	ldi	r24, 0xC0	; 192
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	fc 01       	movw	r30, r24
 15c:	80 81       	ld	r24, Z
 15e:	88 23       	and	r24, r24
 160:	d4 f7       	brge	.-12     	; 0x156 <UART_GetCharacter+0xa>
		
	//TODO:
	// Get data from buffer
	return (char)UDR0;
 162:	86 ec       	ldi	r24, 0xC6	; 198
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	fc 01       	movw	r30, r24
 168:	80 81       	ld	r24, Z
}
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <main>:

int main(void)
{
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	cd b7       	in	r28, 0x3d	; 61
 176:	de b7       	in	r29, 0x3e	; 62
 178:	cb 51       	subi	r28, 0x1B	; 27
 17a:	d1 40       	sbci	r29, 0x01	; 1
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	f8 94       	cli
 180:	de bf       	out	0x3e, r29	; 62
 182:	0f be       	out	0x3f, r0	; 63
 184:	cd bf       	out	0x3d, r28	; 61
	char buffer[255];

	//Don't forget to call the init function :)
	UART_Init();
 186:	0e 94 55 00 	call	0xaa	; 0xaa <UART_Init>

	// Setting up STDIO input and output buffer
	// You don't have to understand this!
	//----- START OF STDIO IO BUFFER SETUP
	FILE UART_output = FDEV_SETUP_STREAM(UART_SendCharacter, NULL, _FDEV_SETUP_WRITE);
 18a:	ce 01       	movw	r24, r28
 18c:	93 95       	inc	r25
 18e:	2e e0       	ldi	r18, 0x0E	; 14
 190:	fc 01       	movw	r30, r24
 192:	32 2f       	mov	r19, r18
 194:	11 92       	st	Z+, r1
 196:	3a 95       	dec	r19
 198:	e9 f7       	brne	.-6      	; 0x194 <main+0x24>
 19a:	ce 01       	movw	r24, r28
 19c:	93 95       	inc	r25
 19e:	22 e0       	ldi	r18, 0x02	; 2
 1a0:	fc 01       	movw	r30, r24
 1a2:	23 83       	std	Z+3, r18	; 0x03
 1a4:	ce 01       	movw	r24, r28
 1a6:	93 95       	inc	r25
 1a8:	2b e8       	ldi	r18, 0x8B	; 139
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	fc 01       	movw	r30, r24
 1ae:	31 87       	std	Z+9, r19	; 0x09
 1b0:	20 87       	std	Z+8, r18	; 0x08
	stdout = &UART_output;
 1b2:	ce 01       	movw	r24, r28
 1b4:	93 95       	inc	r25
 1b6:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x3>
 1ba:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end+0x2>
	FILE UART_input = FDEV_SETUP_STREAM(NULL, UART_GetCharacter, _FDEV_SETUP_READ);
 1be:	ce 01       	movw	r24, r28
 1c0:	82 5f       	subi	r24, 0xF2	; 242
 1c2:	9e 4f       	sbci	r25, 0xFE	; 254
 1c4:	2e e0       	ldi	r18, 0x0E	; 14
 1c6:	fc 01       	movw	r30, r24
 1c8:	32 2f       	mov	r19, r18
 1ca:	11 92       	st	Z+, r1
 1cc:	3a 95       	dec	r19
 1ce:	e9 f7       	brne	.-6      	; 0x1ca <main+0x5a>
 1d0:	ce 01       	movw	r24, r28
 1d2:	82 5f       	subi	r24, 0xF2	; 242
 1d4:	9e 4f       	sbci	r25, 0xFE	; 254
 1d6:	21 e0       	ldi	r18, 0x01	; 1
 1d8:	fc 01       	movw	r30, r24
 1da:	23 83       	std	Z+3, r18	; 0x03
 1dc:	ce 01       	movw	r24, r28
 1de:	82 5f       	subi	r24, 0xF2	; 242
 1e0:	9e 4f       	sbci	r25, 0xFE	; 254
 1e2:	26 ea       	ldi	r18, 0xA6	; 166
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	fc 01       	movw	r30, r24
 1e8:	33 87       	std	Z+11, r19	; 0x0b
 1ea:	22 87       	std	Z+10, r18	; 0x0a
	stdin = &UART_input;
 1ec:	ce 01       	movw	r24, r28
 1ee:	82 5f       	subi	r24, 0xF2	; 242
 1f0:	9e 4f       	sbci	r25, 0xFE	; 254
 1f2:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <__data_end+0x1>
 1f6:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
	//----- END OF STDIO IO BUFFER SETUP

	//TODO:
	// Try printf
	printf("This is a \" printf \" \n");
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	91 e0       	ldi	r25, 0x01	; 1
 1fe:	0e 94 34 01 	call	0x268	; 0x268 <puts>

	// Loop that runs forever
	while (1) {
		//TODO:
		// With gets and puts create a loopback, use the buffer variable!
		gets (buffer);
 202:	ce 01       	movw	r24, r28
 204:	01 96       	adiw	r24, 0x01	; 1
 206:	0e 94 0a 01 	call	0x214	; 0x214 <gets>
		puts (buffer);
 20a:	ce 01       	movw	r24, r28
 20c:	01 96       	adiw	r24, 0x01	; 1
 20e:	0e 94 34 01 	call	0x268	; 0x268 <puts>

	}
 212:	f7 cf       	rjmp	.-18     	; 0x202 <main+0x92>

00000214 <gets>:
 214:	0f 93       	push	r16
 216:	1f 93       	push	r17
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <__data_end>
 220:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <__data_end+0x1>
 224:	23 81       	ldd	r18, Z+3	; 0x03
 226:	20 fd       	sbrc	r18, 0
 228:	03 c0       	rjmp	.+6      	; 0x230 <gets+0x1c>
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	17 c0       	rjmp	.+46     	; 0x25e <gets+0x4a>
 230:	c9 2f       	mov	r28, r25
 232:	d8 2f       	mov	r29, r24
 234:	08 2f       	mov	r16, r24
 236:	19 2f       	mov	r17, r25
 238:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 23c:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <__data_end+0x1>
 240:	0e 94 64 01 	call	0x2c8	; 0x2c8 <fgetc>
 244:	8f 3f       	cpi	r24, 0xFF	; 255
 246:	2f ef       	ldi	r18, 0xFF	; 255
 248:	92 07       	cpc	r25, r18
 24a:	79 f3       	breq	.-34     	; 0x22a <gets+0x16>
 24c:	f8 01       	movw	r30, r16
 24e:	81 93       	st	Z+, r24
 250:	8f 01       	movw	r16, r30
 252:	0a 97       	sbiw	r24, 0x0a	; 10
 254:	89 f7       	brne	.-30     	; 0x238 <gets+0x24>
 256:	31 97       	sbiw	r30, 0x01	; 1
 258:	10 82       	st	Z, r1
 25a:	8d 2f       	mov	r24, r29
 25c:	9c 2f       	mov	r25, r28
 25e:	df 91       	pop	r29
 260:	cf 91       	pop	r28
 262:	1f 91       	pop	r17
 264:	0f 91       	pop	r16
 266:	08 95       	ret

00000268 <puts>:
 268:	0f 93       	push	r16
 26a:	1f 93       	push	r17
 26c:	cf 93       	push	r28
 26e:	df 93       	push	r29
 270:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <__data_end+0x2>
 274:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <__data_end+0x3>
 278:	23 81       	ldd	r18, Z+3	; 0x03
 27a:	21 ff       	sbrs	r18, 1
 27c:	1b c0       	rjmp	.+54     	; 0x2b4 <puts+0x4c>
 27e:	8c 01       	movw	r16, r24
 280:	d0 e0       	ldi	r29, 0x00	; 0
 282:	c0 e0       	ldi	r28, 0x00	; 0
 284:	f8 01       	movw	r30, r16
 286:	81 91       	ld	r24, Z+
 288:	8f 01       	movw	r16, r30
 28a:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <__data_end+0x2>
 28e:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <__data_end+0x3>
 292:	db 01       	movw	r26, r22
 294:	18 96       	adiw	r26, 0x08	; 8
 296:	ed 91       	ld	r30, X+
 298:	fc 91       	ld	r31, X
 29a:	19 97       	sbiw	r26, 0x09	; 9
 29c:	88 23       	and	r24, r24
 29e:	31 f0       	breq	.+12     	; 0x2ac <puts+0x44>
 2a0:	09 95       	icall
 2a2:	89 2b       	or	r24, r25
 2a4:	79 f3       	breq	.-34     	; 0x284 <puts+0x1c>
 2a6:	df ef       	ldi	r29, 0xFF	; 255
 2a8:	cf ef       	ldi	r28, 0xFF	; 255
 2aa:	ec cf       	rjmp	.-40     	; 0x284 <puts+0x1c>
 2ac:	8a e0       	ldi	r24, 0x0A	; 10
 2ae:	09 95       	icall
 2b0:	89 2b       	or	r24, r25
 2b2:	19 f0       	breq	.+6      	; 0x2ba <puts+0x52>
 2b4:	8f ef       	ldi	r24, 0xFF	; 255
 2b6:	9f ef       	ldi	r25, 0xFF	; 255
 2b8:	02 c0       	rjmp	.+4      	; 0x2be <puts+0x56>
 2ba:	8d 2f       	mov	r24, r29
 2bc:	9c 2f       	mov	r25, r28
 2be:	df 91       	pop	r29
 2c0:	cf 91       	pop	r28
 2c2:	1f 91       	pop	r17
 2c4:	0f 91       	pop	r16
 2c6:	08 95       	ret

000002c8 <fgetc>:
 2c8:	cf 93       	push	r28
 2ca:	df 93       	push	r29
 2cc:	ec 01       	movw	r28, r24
 2ce:	2b 81       	ldd	r18, Y+3	; 0x03
 2d0:	20 ff       	sbrs	r18, 0
 2d2:	33 c0       	rjmp	.+102    	; 0x33a <fgetc+0x72>
 2d4:	26 ff       	sbrs	r18, 6
 2d6:	0a c0       	rjmp	.+20     	; 0x2ec <fgetc+0x24>
 2d8:	2f 7b       	andi	r18, 0xBF	; 191
 2da:	2b 83       	std	Y+3, r18	; 0x03
 2dc:	8e 81       	ldd	r24, Y+6	; 0x06
 2de:	9f 81       	ldd	r25, Y+7	; 0x07
 2e0:	01 96       	adiw	r24, 0x01	; 1
 2e2:	9f 83       	std	Y+7, r25	; 0x07
 2e4:	8e 83       	std	Y+6, r24	; 0x06
 2e6:	8a 81       	ldd	r24, Y+2	; 0x02
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	29 c0       	rjmp	.+82     	; 0x33e <fgetc+0x76>
 2ec:	22 ff       	sbrs	r18, 2
 2ee:	0f c0       	rjmp	.+30     	; 0x30e <fgetc+0x46>
 2f0:	e8 81       	ld	r30, Y
 2f2:	f9 81       	ldd	r31, Y+1	; 0x01
 2f4:	80 81       	ld	r24, Z
 2f6:	08 2e       	mov	r0, r24
 2f8:	00 0c       	add	r0, r0
 2fa:	99 0b       	sbc	r25, r25
 2fc:	00 97       	sbiw	r24, 0x00	; 0
 2fe:	19 f4       	brne	.+6      	; 0x306 <fgetc+0x3e>
 300:	20 62       	ori	r18, 0x20	; 32
 302:	2b 83       	std	Y+3, r18	; 0x03
 304:	1a c0       	rjmp	.+52     	; 0x33a <fgetc+0x72>
 306:	31 96       	adiw	r30, 0x01	; 1
 308:	f9 83       	std	Y+1, r31	; 0x01
 30a:	e8 83       	st	Y, r30
 30c:	0e c0       	rjmp	.+28     	; 0x32a <fgetc+0x62>
 30e:	ea 85       	ldd	r30, Y+10	; 0x0a
 310:	fb 85       	ldd	r31, Y+11	; 0x0b
 312:	09 95       	icall
 314:	97 ff       	sbrs	r25, 7
 316:	09 c0       	rjmp	.+18     	; 0x32a <fgetc+0x62>
 318:	2b 81       	ldd	r18, Y+3	; 0x03
 31a:	01 96       	adiw	r24, 0x01	; 1
 31c:	11 f0       	breq	.+4      	; 0x322 <fgetc+0x5a>
 31e:	80 e2       	ldi	r24, 0x20	; 32
 320:	01 c0       	rjmp	.+2      	; 0x324 <fgetc+0x5c>
 322:	80 e1       	ldi	r24, 0x10	; 16
 324:	82 2b       	or	r24, r18
 326:	8b 83       	std	Y+3, r24	; 0x03
 328:	08 c0       	rjmp	.+16     	; 0x33a <fgetc+0x72>
 32a:	2e 81       	ldd	r18, Y+6	; 0x06
 32c:	3f 81       	ldd	r19, Y+7	; 0x07
 32e:	2f 5f       	subi	r18, 0xFF	; 255
 330:	3f 4f       	sbci	r19, 0xFF	; 255
 332:	3f 83       	std	Y+7, r19	; 0x07
 334:	2e 83       	std	Y+6, r18	; 0x06
 336:	99 27       	eor	r25, r25
 338:	02 c0       	rjmp	.+4      	; 0x33e <fgetc+0x76>
 33a:	8f ef       	ldi	r24, 0xFF	; 255
 33c:	9f ef       	ldi	r25, 0xFF	; 255
 33e:	df 91       	pop	r29
 340:	cf 91       	pop	r28
 342:	08 95       	ret

00000344 <_exit>:
 344:	f8 94       	cli

00000346 <__stop_program>:
 346:	ff cf       	rjmp	.-2      	; 0x346 <__stop_program>
