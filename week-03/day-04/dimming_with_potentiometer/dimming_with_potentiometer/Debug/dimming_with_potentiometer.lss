
dimming_with_potentiometer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000018a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000136  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000018a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007e8  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000074d  00000000  00000000  00000a14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000025e  00000000  00000000  00001161  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  000013c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000406  00000000  00000000  00001434  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000cb  00000000  00000000  0000183a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001905  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
   4:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
   8:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
   c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  10:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  14:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  18:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  1c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  20:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  24:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  28:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  2c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  30:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  34:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  38:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  3c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  40:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  44:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  48:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  4c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  50:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  54:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  58:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  5c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  60:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  64:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  68:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d4 e0       	ldi	r29, 0x04	; 4
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61
  78:	0e 94 84 00 	call	0x108	; 0x108 <main>
  7c:	0c 94 99 00 	jmp	0x132	; 0x132 <_exit>

00000080 <__bad_interrupt>:
  80:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000084 <init>:
#include <avr/io.h>


void init()
{
  84:	cf 93       	push	r28
  86:	df 93       	push	r29
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
	ADMUX = 0b00100000;
  8c:	8c e7       	ldi	r24, 0x7C	; 124
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	20 e2       	ldi	r18, 0x20	; 32
  92:	fc 01       	movw	r30, r24
  94:	20 83       	st	Z, r18
    ADCSRA = 0b11100010;
  96:	8a e7       	ldi	r24, 0x7A	; 122
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	22 ee       	ldi	r18, 0xE2	; 226
  9c:	fc 01       	movw	r30, r24
  9e:	20 83       	st	Z, r18
    ADCSRB = 0;
  a0:	8b e7       	ldi	r24, 0x7B	; 123
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	fc 01       	movw	r30, r24
  a6:	10 82       	st	Z, r1
   
   // Set the prescaler to 1024 division. See at the TC0 control register in the datasheet!
   
   // With this you also set the clock source to CLK_io and you will also turn on the timer!
   // set compare A mode
   TIFR0 = 0b00000001;
  a8:	85 e3       	ldi	r24, 0x35	; 53
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	21 e0       	ldi	r18, 0x01	; 1
  ae:	fc 01       	movw	r30, r24
  b0:	20 83       	st	Z, r18
   TCNT0 = 0;
  b2:	86 e4       	ldi	r24, 0x46	; 70
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	fc 01       	movw	r30, r24
  b8:	10 82       	st	Z, r1
   OCR0A = 0;
  ba:	87 e4       	ldi	r24, 0x47	; 71
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	fc 01       	movw	r30, r24
  c0:	10 82       	st	Z, r1
   DDRD = 1 << DDRD6;
  c2:	8a e2       	ldi	r24, 0x2A	; 42
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	20 e4       	ldi	r18, 0x40	; 64
  c8:	fc 01       	movw	r30, r24
  ca:	20 83       	st	Z, r18

  
   TCCR0A = 0b10000011;
  cc:	84 e4       	ldi	r24, 0x44	; 68
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	23 e8       	ldi	r18, 0x83	; 131
  d2:	fc 01       	movw	r30, r24
  d4:	20 83       	st	Z, r18
   TCCR0B = 0b00000010;
  d6:	85 e4       	ldi	r24, 0x45	; 69
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	22 e0       	ldi	r18, 0x02	; 2
  dc:	fc 01       	movw	r30, r24
  de:	20 83       	st	Z, r18
	
  
}
  e0:	00 00       	nop
  e2:	df 91       	pop	r29
  e4:	cf 91       	pop	r28
  e6:	08 95       	ret

000000e8 <set_duty>:

void set_duty (uint8_t duty) // duty start for 0 to 255
{
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
  ec:	1f 92       	push	r1
  ee:	cd b7       	in	r28, 0x3d	; 61
  f0:	de b7       	in	r29, 0x3e	; 62
  f2:	89 83       	std	Y+1, r24	; 0x01
	OCR0A = duty;
  f4:	87 e4       	ldi	r24, 0x47	; 71
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	29 81       	ldd	r18, Y+1	; 0x01
  fa:	fc 01       	movw	r30, r24
  fc:	20 83       	st	Z, r18
}
  fe:	00 00       	nop
 100:	0f 90       	pop	r0
 102:	df 91       	pop	r29
 104:	cf 91       	pop	r28
 106:	08 95       	ret

00000108 <main>:


int main(void)
{
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	00 d0       	rcall	.+0      	; 0x10e <main+0x6>
 10e:	cd b7       	in	r28, 0x3d	; 61
 110:	de b7       	in	r29, 0x3e	; 62
    init();
 112:	0e 94 42 00 	call	0x84	; 0x84 <init>
    
    uint16_t combination_result;
    
    while (1) 
    {
		low = ADCL;
 116:	88 e7       	ldi	r24, 0x78	; 120
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	fc 01       	movw	r30, r24
 11c:	80 81       	ld	r24, Z
 11e:	89 83       	std	Y+1, r24	; 0x01
        high= ADCH;
 120:	89 e7       	ldi	r24, 0x79	; 121
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	fc 01       	movw	r30, r24
 126:	80 81       	ld	r24, Z
 128:	8a 83       	std	Y+2, r24	; 0x02
        
		set_duty(high);
 12a:	8a 81       	ldd	r24, Y+2	; 0x02
 12c:	0e 94 74 00 	call	0xe8	; 0xe8 <set_duty>
        
    }
 130:	f2 cf       	rjmp	.-28     	; 0x116 <main+0xe>

00000132 <_exit>:
 132:	f8 94       	cli

00000134 <__stop_program>:
 134:	ff cf       	rjmp	.-2      	; 0x134 <__stop_program>
