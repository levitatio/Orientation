
blinker_with_interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000027e  00000312  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000027e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800102  00800102  00000314  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000344  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000817  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000074d  00000000  00000000  00000bd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ae  00000000  00000000  00001320  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d8  00000000  00000000  000015d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000040a  00000000  00000000  000016a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001bc  00000000  00000000  00001ab2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001c6e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__vector_9>
  28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  58:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  5c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  60:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  64:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  68:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d4 e0       	ldi	r29, 0x04	; 4
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_copy_data>:
  78:	11 e0       	ldi	r17, 0x01	; 1
  7a:	a0 e0       	ldi	r26, 0x00	; 0
  7c:	b1 e0       	ldi	r27, 0x01	; 1
  7e:	ee e7       	ldi	r30, 0x7E	; 126
  80:	f2 e0       	ldi	r31, 0x02	; 2
  82:	02 c0       	rjmp	.+4      	; 0x88 <__do_copy_data+0x10>
  84:	05 90       	lpm	r0, Z+
  86:	0d 92       	st	X+, r0
  88:	a2 30       	cpi	r26, 0x02	; 2
  8a:	b1 07       	cpc	r27, r17
  8c:	d9 f7       	brne	.-10     	; 0x84 <__do_copy_data+0xc>

0000008e <__do_clear_bss>:
  8e:	21 e0       	ldi	r18, 0x01	; 1
  90:	a2 e0       	ldi	r26, 0x02	; 2
  92:	b1 e0       	ldi	r27, 0x01	; 1
  94:	01 c0       	rjmp	.+2      	; 0x98 <.do_clear_bss_start>

00000096 <.do_clear_bss_loop>:
  96:	1d 92       	st	X+, r1

00000098 <.do_clear_bss_start>:
  98:	a3 30       	cpi	r26, 0x03	; 3
  9a:	b2 07       	cpc	r27, r18
  9c:	e1 f7       	brne	.-8      	; 0x96 <.do_clear_bss_loop>
  9e:	0e 94 0d 01 	call	0x21a	; 0x21a <main>
  a2:	0c 94 3d 01 	jmp	0x27a	; 0x27a <_exit>

000000a6 <__bad_interrupt>:
  a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <__vector_9>:

uint8_t g_duty = 0;
uint8_t direction_duty_change = 1;

ISR(TIMER2_OVF_vect)
{		
  aa:	1f 92       	push	r1
  ac:	0f 92       	push	r0
  ae:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
  b2:	0f 92       	push	r0
  b4:	11 24       	eor	r1, r1
  b6:	2f 93       	push	r18
  b8:	3f 93       	push	r19
  ba:	4f 93       	push	r20
  bc:	5f 93       	push	r21
  be:	6f 93       	push	r22
  c0:	7f 93       	push	r23
  c2:	8f 93       	push	r24
  c4:	9f 93       	push	r25
  c6:	af 93       	push	r26
  c8:	bf 93       	push	r27
  ca:	ef 93       	push	r30
  cc:	ff 93       	push	r31
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
  d2:	cd b7       	in	r28, 0x3d	; 61
  d4:	de b7       	in	r29, 0x3e	; 62
		if (g_duty > 99){
  d6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
  da:	84 36       	cpi	r24, 0x64	; 100
  dc:	18 f0       	brcs	.+6      	; 0xe4 <__vector_9+0x3a>
			direction_duty_change = 0;
  de:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
  e2:	07 c0       	rjmp	.+14     	; 0xf2 <__vector_9+0x48>
		}else if (g_duty < 1){
  e4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
  e8:	88 23       	and	r24, r24
  ea:	19 f4       	brne	.+6      	; 0xf2 <__vector_9+0x48>
			direction_duty_change = 1;
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		}
	
		if (direction_duty_change) {
  f2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  f6:	88 23       	and	r24, r24
  f8:	31 f0       	breq	.+12     	; 0x106 <__vector_9+0x5c>
			g_duty += 5;	
  fa:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
  fe:	8b 5f       	subi	r24, 0xFB	; 251
 100:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 104:	05 c0       	rjmp	.+10     	; 0x110 <__vector_9+0x66>
			
		}else {
			g_duty -= 5;
 106:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 10a:	85 50       	subi	r24, 0x05	; 5
 10c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
		}
		set_duty(g_duty);
 110:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 114:	88 2f       	mov	r24, r24
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 ee 00 	call	0x1dc	; 0x1dc <set_duty>
}
 11c:	00 00       	nop
 11e:	df 91       	pop	r29
 120:	cf 91       	pop	r28
 122:	ff 91       	pop	r31
 124:	ef 91       	pop	r30
 126:	bf 91       	pop	r27
 128:	af 91       	pop	r26
 12a:	9f 91       	pop	r25
 12c:	8f 91       	pop	r24
 12e:	7f 91       	pop	r23
 130:	6f 91       	pop	r22
 132:	5f 91       	pop	r21
 134:	4f 91       	pop	r20
 136:	3f 91       	pop	r19
 138:	2f 91       	pop	r18
 13a:	0f 90       	pop	r0
 13c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 140:	0f 90       	pop	r0
 142:	1f 90       	pop	r1
 144:	18 95       	reti

00000146 <init>:

void init (uint8_t mode)
{
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
 14a:	1f 92       	push	r1
 14c:	cd b7       	in	r28, 0x3d	; 61
 14e:	de b7       	in	r29, 0x3e	; 62
 150:	89 83       	std	Y+1, r24	; 0x01
	// Set the prescaler to 1024 division. See at the TC0 control register in the datasheet!
	
	// With this you also set the clock source to CLK_io and you will also turn on the timer!
	// set compare A mode
	TIFR0 = 0b00000010;
 152:	85 e3       	ldi	r24, 0x35	; 53
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	22 e0       	ldi	r18, 0x02	; 2
 158:	fc 01       	movw	r30, r24
 15a:	20 83       	st	Z, r18
	TCNT0 = 0;
 15c:	86 e4       	ldi	r24, 0x46	; 70
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	fc 01       	movw	r30, r24
 162:	10 82       	st	Z, r1
	OCR0A = 0;
 164:	87 e4       	ldi	r24, 0x47	; 71
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	fc 01       	movw	r30, r24
 16a:	10 82       	st	Z, r1
	DDRD = 1 << DDRD6;
 16c:	8a e2       	ldi	r24, 0x2A	; 42
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	20 e4       	ldi	r18, 0x40	; 64
 172:	fc 01       	movw	r30, r24
 174:	20 83       	st	Z, r18

	if (mode == FAST){ 
 176:	89 81       	ldd	r24, Y+1	; 0x01
 178:	88 23       	and	r24, r24
 17a:	59 f4       	brne	.+22     	; 0x192 <init+0x4c>
		// set mode and set prescalse
		TCCR0A = 0b10000011;
 17c:	84 e4       	ldi	r24, 0x44	; 68
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	23 e8       	ldi	r18, 0x83	; 131
 182:	fc 01       	movw	r30, r24
 184:	20 83       	st	Z, r18
		TCCR0B = 0b00000010;
 186:	85 e4       	ldi	r24, 0x45	; 69
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	22 e0       	ldi	r18, 0x02	; 2
 18c:	fc 01       	movw	r30, r24
 18e:	20 83       	st	Z, r18
 190:	0d c0       	rjmp	.+26     	; 0x1ac <init+0x66>
	}else if (mode == PHASE_CORRECT){
 192:	89 81       	ldd	r24, Y+1	; 0x01
 194:	81 30       	cpi	r24, 0x01	; 1
 196:	51 f4       	brne	.+20     	; 0x1ac <init+0x66>
		// set mode and set prescalse
		TCCR0A = 0b10000001;
 198:	84 e4       	ldi	r24, 0x44	; 68
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	21 e8       	ldi	r18, 0x81	; 129
 19e:	fc 01       	movw	r30, r24
 1a0:	20 83       	st	Z, r18
		TCCR0B = 0b00000010;
 1a2:	85 e4       	ldi	r24, 0x45	; 69
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	22 e0       	ldi	r18, 0x02	; 2
 1a8:	fc 01       	movw	r30, r24
 1aa:	20 83       	st	Z, r18
	}else {}
		
	// Set second timer to interrupt process
	TCCR2A = 0;
 1ac:	80 eb       	ldi	r24, 0xB0	; 176
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	fc 01       	movw	r30, r24
 1b2:	10 82       	st	Z, r1
	// Set prescale to 1024
	TCCR2B = 0b00000111;
 1b4:	81 eb       	ldi	r24, 0xB1	; 177
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	27 e0       	ldi	r18, 0x07	; 7
 1ba:	fc 01       	movw	r30, r24
 1bc:	20 83       	st	Z, r18
	// Init counter to 0
	TCNT2 = 0;
 1be:	82 eb       	ldi	r24, 0xB2	; 178
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	fc 01       	movw	r30, r24
 1c4:	10 82       	st	Z, r1
	// Set interrupt option to overflow
	TIMSK2 = 1;
 1c6:	80 e7       	ldi	r24, 0x70	; 112
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	21 e0       	ldi	r18, 0x01	; 1
 1cc:	fc 01       	movw	r30, r24
 1ce:	20 83       	st	Z, r18
		
	sei();
 1d0:	78 94       	sei
	
}
 1d2:	00 00       	nop
 1d4:	0f 90       	pop	r0
 1d6:	df 91       	pop	r29
 1d8:	cf 91       	pop	r28
 1da:	08 95       	ret

000001dc <set_duty>:
void set_duty(uint8_t duty)
{
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	1f 92       	push	r1
 1e2:	cd b7       	in	r28, 0x3d	; 61
 1e4:	de b7       	in	r29, 0x3e	; 62
 1e6:	89 83       	std	Y+1, r24	; 0x01
	OCR0A = (duty *255) / 100;
 1e8:	27 e4       	ldi	r18, 0x47	; 71
 1ea:	30 e0       	ldi	r19, 0x00	; 0
 1ec:	89 81       	ldd	r24, Y+1	; 0x01
 1ee:	88 2f       	mov	r24, r24
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	4f ef       	ldi	r20, 0xFF	; 255
 1f4:	48 9f       	mul	r20, r24
 1f6:	b0 01       	movw	r22, r0
 1f8:	49 9f       	mul	r20, r25
 1fa:	70 0d       	add	r23, r0
 1fc:	11 24       	eor	r1, r1
 1fe:	44 e6       	ldi	r20, 0x64	; 100
 200:	50 e0       	ldi	r21, 0x00	; 0
 202:	cb 01       	movw	r24, r22
 204:	ba 01       	movw	r22, r20
 206:	0e 94 15 01 	call	0x22a	; 0x22a <__divmodhi4>
 20a:	cb 01       	movw	r24, r22
 20c:	f9 01       	movw	r30, r18
 20e:	80 83       	st	Z, r24
	
}
 210:	00 00       	nop
 212:	0f 90       	pop	r0
 214:	df 91       	pop	r29
 216:	cf 91       	pop	r28
 218:	08 95       	ret

0000021a <main>:


int main(void)
{
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
 21e:	cd b7       	in	r28, 0x3d	; 61
 220:	de b7       	in	r29, 0x3e	; 62
	init(FAST);
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	0e 94 a3 00 	call	0x146	; 0x146 <init>
    /* Replace with your application code */
    while (1) 
    {
    }
 228:	ff cf       	rjmp	.-2      	; 0x228 <main+0xe>

0000022a <__divmodhi4>:
 22a:	97 fb       	bst	r25, 7
 22c:	07 2e       	mov	r0, r23
 22e:	16 f4       	brtc	.+4      	; 0x234 <__divmodhi4+0xa>
 230:	00 94       	com	r0
 232:	07 d0       	rcall	.+14     	; 0x242 <__divmodhi4_neg1>
 234:	77 fd       	sbrc	r23, 7
 236:	09 d0       	rcall	.+18     	; 0x24a <__divmodhi4_neg2>
 238:	0e 94 29 01 	call	0x252	; 0x252 <__udivmodhi4>
 23c:	07 fc       	sbrc	r0, 7
 23e:	05 d0       	rcall	.+10     	; 0x24a <__divmodhi4_neg2>
 240:	3e f4       	brtc	.+14     	; 0x250 <__divmodhi4_exit>

00000242 <__divmodhi4_neg1>:
 242:	90 95       	com	r25
 244:	81 95       	neg	r24
 246:	9f 4f       	sbci	r25, 0xFF	; 255
 248:	08 95       	ret

0000024a <__divmodhi4_neg2>:
 24a:	70 95       	com	r23
 24c:	61 95       	neg	r22
 24e:	7f 4f       	sbci	r23, 0xFF	; 255

00000250 <__divmodhi4_exit>:
 250:	08 95       	ret

00000252 <__udivmodhi4>:
 252:	aa 1b       	sub	r26, r26
 254:	bb 1b       	sub	r27, r27
 256:	51 e1       	ldi	r21, 0x11	; 17
 258:	07 c0       	rjmp	.+14     	; 0x268 <__udivmodhi4_ep>

0000025a <__udivmodhi4_loop>:
 25a:	aa 1f       	adc	r26, r26
 25c:	bb 1f       	adc	r27, r27
 25e:	a6 17       	cp	r26, r22
 260:	b7 07       	cpc	r27, r23
 262:	10 f0       	brcs	.+4      	; 0x268 <__udivmodhi4_ep>
 264:	a6 1b       	sub	r26, r22
 266:	b7 0b       	sbc	r27, r23

00000268 <__udivmodhi4_ep>:
 268:	88 1f       	adc	r24, r24
 26a:	99 1f       	adc	r25, r25
 26c:	5a 95       	dec	r21
 26e:	a9 f7       	brne	.-22     	; 0x25a <__udivmodhi4_loop>
 270:	80 95       	com	r24
 272:	90 95       	com	r25
 274:	bc 01       	movw	r22, r24
 276:	cd 01       	movw	r24, r26
 278:	08 95       	ret

0000027a <_exit>:
 27a:	f8 94       	cli

0000027c <__stop_program>:
 27c:	ff cf       	rjmp	.-2      	; 0x27c <__stop_program>
