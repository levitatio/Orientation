
dimming_led.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000004f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004a0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000004f4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000524  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000564  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000884  00000000  00000000  00000594  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000797  00000000  00000000  00000e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002fb  00000000  00000000  000015af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  000018ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000040a  00000000  00000000  00001920  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ca  00000000  00000000  00001d2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001df4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
   4:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
   8:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
   c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  10:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  14:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  18:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  1c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  20:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  24:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  28:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  2c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  30:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  34:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  38:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  3c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  40:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  44:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  48:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  4c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  50:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  54:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  58:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  5c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  60:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  64:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  68:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d4 e0       	ldi	r29, 0x04	; 4
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61
  78:	0e 94 80 00 	call	0x100	; 0x100 <main>
  7c:	0c 94 4e 02 	jmp	0x49c	; 0x49c <_exit>

00000080 <__bad_interrupt>:
  80:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000084 <init>:
#include <avr/io.h>
#define F_CPU 16000000
#include <util/delay.h>

void init ()
{
  84:	cf 93       	push	r28
  86:	df 93       	push	r29
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
	// Set the prescaler to 1024 division. See at the TC0 control register in the datasheet!
	
	// With this you also set the clock source to CLK_io and you will also turn on the timer!
	TCNT0 = 0;
  8c:	86 e4       	ldi	r24, 0x46	; 70
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	fc 01       	movw	r30, r24
  92:	10 82       	st	Z, r1
	
	//DDRD = 1 << PORTD6;
	DDRD = 1 << DDRD6;
  94:	8a e2       	ldi	r24, 0x2A	; 42
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	20 e4       	ldi	r18, 0x40	; 64
  9a:	fc 01       	movw	r30, r24
  9c:	20 83       	st	Z, r18
	// Set the Fast PWM mode with 
	TCCR0A = 0b10000011;
  9e:	84 e4       	ldi	r24, 0x44	; 68
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	23 e8       	ldi	r18, 0x83	; 131
  a4:	fc 01       	movw	r30, r24
  a6:	20 83       	st	Z, r18
	TCCR0B = 0b00000010;
  a8:	85 e4       	ldi	r24, 0x45	; 69
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	22 e0       	ldi	r18, 0x02	; 2
  ae:	fc 01       	movw	r30, r24
  b0:	20 83       	st	Z, r18
	OCR0A = 0;
  b2:	87 e4       	ldi	r24, 0x47	; 71
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	fc 01       	movw	r30, r24
  b8:	10 82       	st	Z, r1
}
  ba:	00 00       	nop
  bc:	df 91       	pop	r29
  be:	cf 91       	pop	r28
  c0:	08 95       	ret

000000c2 <set_duty>:
void set_duty(uint8_t duty)
{
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
  c6:	1f 92       	push	r1
  c8:	cd b7       	in	r28, 0x3d	; 61
  ca:	de b7       	in	r29, 0x3e	; 62
  cc:	89 83       	std	Y+1, r24	; 0x01
	OCR0A = (duty *255) / 100;
  ce:	27 e4       	ldi	r18, 0x47	; 71
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	89 81       	ldd	r24, Y+1	; 0x01
  d4:	88 2f       	mov	r24, r24
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	4f ef       	ldi	r20, 0xFF	; 255
  da:	48 9f       	mul	r20, r24
  dc:	b0 01       	movw	r22, r0
  de:	49 9f       	mul	r20, r25
  e0:	70 0d       	add	r23, r0
  e2:	11 24       	eor	r1, r1
  e4:	44 e6       	ldi	r20, 0x64	; 100
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	cb 01       	movw	r24, r22
  ea:	ba 01       	movw	r22, r20
  ec:	0e 94 26 02 	call	0x44c	; 0x44c <__divmodhi4>
  f0:	cb 01       	movw	r24, r22
  f2:	f9 01       	movw	r30, r18
  f4:	80 83       	st	Z, r24
	
}
  f6:	00 00       	nop
  f8:	0f 90       	pop	r0
  fa:	df 91       	pop	r29
  fc:	cf 91       	pop	r28
  fe:	08 95       	ret

00000100 <main>:


int main(void)
{
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
 104:	cd b7       	in	r28, 0x3d	; 61
 106:	de b7       	in	r29, 0x3e	; 62
 108:	2f 97       	sbiw	r28, 0x0f	; 15
 10a:	0f b6       	in	r0, 0x3f	; 63
 10c:	f8 94       	cli
 10e:	de bf       	out	0x3e, r29	; 62
 110:	0f be       	out	0x3f, r0	; 63
 112:	cd bf       	out	0x3d, r28	; 61
	uint8_t duty = 0;
 114:	19 82       	std	Y+1, r1	; 0x01
	init();
 116:	0e 94 42 00 	call	0x84	; 0x84 <init>
    /* Replace with your application code */
    while (1) 
    {
		set_duty(duty);
 11a:	89 81       	ldd	r24, Y+1	; 0x01
 11c:	0e 94 61 00 	call	0xc2	; 0xc2 <set_duty>
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	a8 ec       	ldi	r26, 0xC8	; 200
 126:	b2 e4       	ldi	r27, 0x42	; 66
 128:	8a 83       	std	Y+2, r24	; 0x02
 12a:	9b 83       	std	Y+3, r25	; 0x03
 12c:	ac 83       	std	Y+4, r26	; 0x04
 12e:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 130:	20 e0       	ldi	r18, 0x00	; 0
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	4a e7       	ldi	r20, 0x7A	; 122
 136:	55 e4       	ldi	r21, 0x45	; 69
 138:	6a 81       	ldd	r22, Y+2	; 0x02
 13a:	7b 81       	ldd	r23, Y+3	; 0x03
 13c:	8c 81       	ldd	r24, Y+4	; 0x04
 13e:	9d 81       	ldd	r25, Y+5	; 0x05
 140:	0e 94 91 01 	call	0x322	; 0x322 <__mulsf3>
 144:	dc 01       	movw	r26, r24
 146:	cb 01       	movw	r24, r22
 148:	8e 83       	std	Y+6, r24	; 0x06
 14a:	9f 83       	std	Y+7, r25	; 0x07
 14c:	a8 87       	std	Y+8, r26	; 0x08
 14e:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
 150:	20 e0       	ldi	r18, 0x00	; 0
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	40 e8       	ldi	r20, 0x80	; 128
 156:	5f e3       	ldi	r21, 0x3F	; 63
 158:	6e 81       	ldd	r22, Y+6	; 0x06
 15a:	7f 81       	ldd	r23, Y+7	; 0x07
 15c:	88 85       	ldd	r24, Y+8	; 0x08
 15e:	99 85       	ldd	r25, Y+9	; 0x09
 160:	0e 94 0b 01 	call	0x216	; 0x216 <__cmpsf2>
 164:	88 23       	and	r24, r24
 166:	2c f4       	brge	.+10     	; 0x172 <main+0x72>
		__ticks = 1;
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	9b 87       	std	Y+11, r25	; 0x0b
 16e:	8a 87       	std	Y+10, r24	; 0x0a
 170:	3f c0       	rjmp	.+126    	; 0x1f0 <main+0xf0>
	else if (__tmp > 65535)
 172:	20 e0       	ldi	r18, 0x00	; 0
 174:	3f ef       	ldi	r19, 0xFF	; 255
 176:	4f e7       	ldi	r20, 0x7F	; 127
 178:	57 e4       	ldi	r21, 0x47	; 71
 17a:	6e 81       	ldd	r22, Y+6	; 0x06
 17c:	7f 81       	ldd	r23, Y+7	; 0x07
 17e:	88 85       	ldd	r24, Y+8	; 0x08
 180:	99 85       	ldd	r25, Y+9	; 0x09
 182:	0e 94 8c 01 	call	0x318	; 0x318 <__gesf2>
 186:	18 16       	cp	r1, r24
 188:	4c f5       	brge	.+82     	; 0x1dc <main+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 18a:	20 e0       	ldi	r18, 0x00	; 0
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	40 e2       	ldi	r20, 0x20	; 32
 190:	51 e4       	ldi	r21, 0x41	; 65
 192:	6a 81       	ldd	r22, Y+2	; 0x02
 194:	7b 81       	ldd	r23, Y+3	; 0x03
 196:	8c 81       	ldd	r24, Y+4	; 0x04
 198:	9d 81       	ldd	r25, Y+5	; 0x05
 19a:	0e 94 91 01 	call	0x322	; 0x322 <__mulsf3>
 19e:	dc 01       	movw	r26, r24
 1a0:	cb 01       	movw	r24, r22
 1a2:	bc 01       	movw	r22, r24
 1a4:	cd 01       	movw	r24, r26
 1a6:	0e 94 10 01 	call	0x220	; 0x220 <__fixunssfsi>
 1aa:	dc 01       	movw	r26, r24
 1ac:	cb 01       	movw	r24, r22
 1ae:	9b 87       	std	Y+11, r25	; 0x0b
 1b0:	8a 87       	std	Y+10, r24	; 0x0a
 1b2:	0f c0       	rjmp	.+30     	; 0x1d2 <main+0xd2>
 1b4:	80 e9       	ldi	r24, 0x90	; 144
 1b6:	91 e0       	ldi	r25, 0x01	; 1
 1b8:	9d 87       	std	Y+13, r25	; 0x0d
 1ba:	8c 87       	std	Y+12, r24	; 0x0c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1bc:	8c 85       	ldd	r24, Y+12	; 0x0c
 1be:	9d 85       	ldd	r25, Y+13	; 0x0d
 1c0:	01 97       	sbiw	r24, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <main+0xc0>
 1c4:	9d 87       	std	Y+13, r25	; 0x0d
 1c6:	8c 87       	std	Y+12, r24	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1c8:	8a 85       	ldd	r24, Y+10	; 0x0a
 1ca:	9b 85       	ldd	r25, Y+11	; 0x0b
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	9b 87       	std	Y+11, r25	; 0x0b
 1d0:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1d2:	8a 85       	ldd	r24, Y+10	; 0x0a
 1d4:	9b 85       	ldd	r25, Y+11	; 0x0b
 1d6:	89 2b       	or	r24, r25
 1d8:	69 f7       	brne	.-38     	; 0x1b4 <main+0xb4>
 1da:	14 c0       	rjmp	.+40     	; 0x204 <main+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1dc:	6e 81       	ldd	r22, Y+6	; 0x06
 1de:	7f 81       	ldd	r23, Y+7	; 0x07
 1e0:	88 85       	ldd	r24, Y+8	; 0x08
 1e2:	99 85       	ldd	r25, Y+9	; 0x09
 1e4:	0e 94 10 01 	call	0x220	; 0x220 <__fixunssfsi>
 1e8:	dc 01       	movw	r26, r24
 1ea:	cb 01       	movw	r24, r22
 1ec:	9b 87       	std	Y+11, r25	; 0x0b
 1ee:	8a 87       	std	Y+10, r24	; 0x0a
 1f0:	8a 85       	ldd	r24, Y+10	; 0x0a
 1f2:	9b 85       	ldd	r25, Y+11	; 0x0b
 1f4:	9f 87       	std	Y+15, r25	; 0x0f
 1f6:	8e 87       	std	Y+14, r24	; 0x0e
 1f8:	8e 85       	ldd	r24, Y+14	; 0x0e
 1fa:	9f 85       	ldd	r25, Y+15	; 0x0f
 1fc:	01 97       	sbiw	r24, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <main+0xfc>
 200:	9f 87       	std	Y+15, r25	; 0x0f
 202:	8e 87       	std	Y+14, r24	; 0x0e
		_delay_ms(100);
		
		duty += 5;
 204:	89 81       	ldd	r24, Y+1	; 0x01
 206:	8b 5f       	subi	r24, 0xFB	; 251
 208:	89 83       	std	Y+1, r24	; 0x01
		if (duty > 99){
 20a:	89 81       	ldd	r24, Y+1	; 0x01
 20c:	84 36       	cpi	r24, 0x64	; 100
 20e:	08 f4       	brcc	.+2      	; 0x212 <main+0x112>
 210:	84 cf       	rjmp	.-248    	; 0x11a <main+0x1a>
			duty = 0;
 212:	19 82       	std	Y+1, r1	; 0x01
		}
    }
 214:	82 cf       	rjmp	.-252    	; 0x11a <main+0x1a>

00000216 <__cmpsf2>:
 216:	0e 94 3f 01 	call	0x27e	; 0x27e <__fp_cmp>
 21a:	08 f4       	brcc	.+2      	; 0x21e <__cmpsf2+0x8>
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	08 95       	ret

00000220 <__fixunssfsi>:
 220:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <__fp_splitA>
 224:	88 f0       	brcs	.+34     	; 0x248 <__fixunssfsi+0x28>
 226:	9f 57       	subi	r25, 0x7F	; 127
 228:	98 f0       	brcs	.+38     	; 0x250 <__fixunssfsi+0x30>
 22a:	b9 2f       	mov	r27, r25
 22c:	99 27       	eor	r25, r25
 22e:	b7 51       	subi	r27, 0x17	; 23
 230:	b0 f0       	brcs	.+44     	; 0x25e <__fixunssfsi+0x3e>
 232:	e1 f0       	breq	.+56     	; 0x26c <__fixunssfsi+0x4c>
 234:	66 0f       	add	r22, r22
 236:	77 1f       	adc	r23, r23
 238:	88 1f       	adc	r24, r24
 23a:	99 1f       	adc	r25, r25
 23c:	1a f0       	brmi	.+6      	; 0x244 <__fixunssfsi+0x24>
 23e:	ba 95       	dec	r27
 240:	c9 f7       	brne	.-14     	; 0x234 <__fixunssfsi+0x14>
 242:	14 c0       	rjmp	.+40     	; 0x26c <__fixunssfsi+0x4c>
 244:	b1 30       	cpi	r27, 0x01	; 1
 246:	91 f0       	breq	.+36     	; 0x26c <__fixunssfsi+0x4c>
 248:	0e 94 85 01 	call	0x30a	; 0x30a <__fp_zero>
 24c:	b1 e0       	ldi	r27, 0x01	; 1
 24e:	08 95       	ret
 250:	0c 94 85 01 	jmp	0x30a	; 0x30a <__fp_zero>
 254:	67 2f       	mov	r22, r23
 256:	78 2f       	mov	r23, r24
 258:	88 27       	eor	r24, r24
 25a:	b8 5f       	subi	r27, 0xF8	; 248
 25c:	39 f0       	breq	.+14     	; 0x26c <__fixunssfsi+0x4c>
 25e:	b9 3f       	cpi	r27, 0xF9	; 249
 260:	cc f3       	brlt	.-14     	; 0x254 <__fixunssfsi+0x34>
 262:	86 95       	lsr	r24
 264:	77 95       	ror	r23
 266:	67 95       	ror	r22
 268:	b3 95       	inc	r27
 26a:	d9 f7       	brne	.-10     	; 0x262 <__fixunssfsi+0x42>
 26c:	3e f4       	brtc	.+14     	; 0x27c <__fixunssfsi+0x5c>
 26e:	90 95       	com	r25
 270:	80 95       	com	r24
 272:	70 95       	com	r23
 274:	61 95       	neg	r22
 276:	7f 4f       	sbci	r23, 0xFF	; 255
 278:	8f 4f       	sbci	r24, 0xFF	; 255
 27a:	9f 4f       	sbci	r25, 0xFF	; 255
 27c:	08 95       	ret

0000027e <__fp_cmp>:
 27e:	99 0f       	add	r25, r25
 280:	00 08       	sbc	r0, r0
 282:	55 0f       	add	r21, r21
 284:	aa 0b       	sbc	r26, r26
 286:	e0 e8       	ldi	r30, 0x80	; 128
 288:	fe ef       	ldi	r31, 0xFE	; 254
 28a:	16 16       	cp	r1, r22
 28c:	17 06       	cpc	r1, r23
 28e:	e8 07       	cpc	r30, r24
 290:	f9 07       	cpc	r31, r25
 292:	c0 f0       	brcs	.+48     	; 0x2c4 <__fp_cmp+0x46>
 294:	12 16       	cp	r1, r18
 296:	13 06       	cpc	r1, r19
 298:	e4 07       	cpc	r30, r20
 29a:	f5 07       	cpc	r31, r21
 29c:	98 f0       	brcs	.+38     	; 0x2c4 <__fp_cmp+0x46>
 29e:	62 1b       	sub	r22, r18
 2a0:	73 0b       	sbc	r23, r19
 2a2:	84 0b       	sbc	r24, r20
 2a4:	95 0b       	sbc	r25, r21
 2a6:	39 f4       	brne	.+14     	; 0x2b6 <__fp_cmp+0x38>
 2a8:	0a 26       	eor	r0, r26
 2aa:	61 f0       	breq	.+24     	; 0x2c4 <__fp_cmp+0x46>
 2ac:	23 2b       	or	r18, r19
 2ae:	24 2b       	or	r18, r20
 2b0:	25 2b       	or	r18, r21
 2b2:	21 f4       	brne	.+8      	; 0x2bc <__fp_cmp+0x3e>
 2b4:	08 95       	ret
 2b6:	0a 26       	eor	r0, r26
 2b8:	09 f4       	brne	.+2      	; 0x2bc <__fp_cmp+0x3e>
 2ba:	a1 40       	sbci	r26, 0x01	; 1
 2bc:	a6 95       	lsr	r26
 2be:	8f ef       	ldi	r24, 0xFF	; 255
 2c0:	81 1d       	adc	r24, r1
 2c2:	81 1d       	adc	r24, r1
 2c4:	08 95       	ret

000002c6 <__fp_split3>:
 2c6:	57 fd       	sbrc	r21, 7
 2c8:	90 58       	subi	r25, 0x80	; 128
 2ca:	44 0f       	add	r20, r20
 2cc:	55 1f       	adc	r21, r21
 2ce:	59 f0       	breq	.+22     	; 0x2e6 <__fp_splitA+0x10>
 2d0:	5f 3f       	cpi	r21, 0xFF	; 255
 2d2:	71 f0       	breq	.+28     	; 0x2f0 <__fp_splitA+0x1a>
 2d4:	47 95       	ror	r20

000002d6 <__fp_splitA>:
 2d6:	88 0f       	add	r24, r24
 2d8:	97 fb       	bst	r25, 7
 2da:	99 1f       	adc	r25, r25
 2dc:	61 f0       	breq	.+24     	; 0x2f6 <__fp_splitA+0x20>
 2de:	9f 3f       	cpi	r25, 0xFF	; 255
 2e0:	79 f0       	breq	.+30     	; 0x300 <__fp_splitA+0x2a>
 2e2:	87 95       	ror	r24
 2e4:	08 95       	ret
 2e6:	12 16       	cp	r1, r18
 2e8:	13 06       	cpc	r1, r19
 2ea:	14 06       	cpc	r1, r20
 2ec:	55 1f       	adc	r21, r21
 2ee:	f2 cf       	rjmp	.-28     	; 0x2d4 <__fp_split3+0xe>
 2f0:	46 95       	lsr	r20
 2f2:	f1 df       	rcall	.-30     	; 0x2d6 <__fp_splitA>
 2f4:	08 c0       	rjmp	.+16     	; 0x306 <__fp_splitA+0x30>
 2f6:	16 16       	cp	r1, r22
 2f8:	17 06       	cpc	r1, r23
 2fa:	18 06       	cpc	r1, r24
 2fc:	99 1f       	adc	r25, r25
 2fe:	f1 cf       	rjmp	.-30     	; 0x2e2 <__fp_splitA+0xc>
 300:	86 95       	lsr	r24
 302:	71 05       	cpc	r23, r1
 304:	61 05       	cpc	r22, r1
 306:	08 94       	sec
 308:	08 95       	ret

0000030a <__fp_zero>:
 30a:	e8 94       	clt

0000030c <__fp_szero>:
 30c:	bb 27       	eor	r27, r27
 30e:	66 27       	eor	r22, r22
 310:	77 27       	eor	r23, r23
 312:	cb 01       	movw	r24, r22
 314:	97 f9       	bld	r25, 7
 316:	08 95       	ret

00000318 <__gesf2>:
 318:	0e 94 3f 01 	call	0x27e	; 0x27e <__fp_cmp>
 31c:	08 f4       	brcc	.+2      	; 0x320 <__gesf2+0x8>
 31e:	8f ef       	ldi	r24, 0xFF	; 255
 320:	08 95       	ret

00000322 <__mulsf3>:
 322:	0e 94 a4 01 	call	0x348	; 0x348 <__mulsf3x>
 326:	0c 94 15 02 	jmp	0x42a	; 0x42a <__fp_round>
 32a:	0e 94 07 02 	call	0x40e	; 0x40e <__fp_pscA>
 32e:	38 f0       	brcs	.+14     	; 0x33e <__mulsf3+0x1c>
 330:	0e 94 0e 02 	call	0x41c	; 0x41c <__fp_pscB>
 334:	20 f0       	brcs	.+8      	; 0x33e <__mulsf3+0x1c>
 336:	95 23       	and	r25, r21
 338:	11 f0       	breq	.+4      	; 0x33e <__mulsf3+0x1c>
 33a:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__fp_inf>
 33e:	0c 94 04 02 	jmp	0x408	; 0x408 <__fp_nan>
 342:	11 24       	eor	r1, r1
 344:	0c 94 86 01 	jmp	0x30c	; 0x30c <__fp_szero>

00000348 <__mulsf3x>:
 348:	0e 94 63 01 	call	0x2c6	; 0x2c6 <__fp_split3>
 34c:	70 f3       	brcs	.-36     	; 0x32a <__mulsf3+0x8>

0000034e <__mulsf3_pse>:
 34e:	95 9f       	mul	r25, r21
 350:	c1 f3       	breq	.-16     	; 0x342 <__mulsf3+0x20>
 352:	95 0f       	add	r25, r21
 354:	50 e0       	ldi	r21, 0x00	; 0
 356:	55 1f       	adc	r21, r21
 358:	62 9f       	mul	r22, r18
 35a:	f0 01       	movw	r30, r0
 35c:	72 9f       	mul	r23, r18
 35e:	bb 27       	eor	r27, r27
 360:	f0 0d       	add	r31, r0
 362:	b1 1d       	adc	r27, r1
 364:	63 9f       	mul	r22, r19
 366:	aa 27       	eor	r26, r26
 368:	f0 0d       	add	r31, r0
 36a:	b1 1d       	adc	r27, r1
 36c:	aa 1f       	adc	r26, r26
 36e:	64 9f       	mul	r22, r20
 370:	66 27       	eor	r22, r22
 372:	b0 0d       	add	r27, r0
 374:	a1 1d       	adc	r26, r1
 376:	66 1f       	adc	r22, r22
 378:	82 9f       	mul	r24, r18
 37a:	22 27       	eor	r18, r18
 37c:	b0 0d       	add	r27, r0
 37e:	a1 1d       	adc	r26, r1
 380:	62 1f       	adc	r22, r18
 382:	73 9f       	mul	r23, r19
 384:	b0 0d       	add	r27, r0
 386:	a1 1d       	adc	r26, r1
 388:	62 1f       	adc	r22, r18
 38a:	83 9f       	mul	r24, r19
 38c:	a0 0d       	add	r26, r0
 38e:	61 1d       	adc	r22, r1
 390:	22 1f       	adc	r18, r18
 392:	74 9f       	mul	r23, r20
 394:	33 27       	eor	r19, r19
 396:	a0 0d       	add	r26, r0
 398:	61 1d       	adc	r22, r1
 39a:	23 1f       	adc	r18, r19
 39c:	84 9f       	mul	r24, r20
 39e:	60 0d       	add	r22, r0
 3a0:	21 1d       	adc	r18, r1
 3a2:	82 2f       	mov	r24, r18
 3a4:	76 2f       	mov	r23, r22
 3a6:	6a 2f       	mov	r22, r26
 3a8:	11 24       	eor	r1, r1
 3aa:	9f 57       	subi	r25, 0x7F	; 127
 3ac:	50 40       	sbci	r21, 0x00	; 0
 3ae:	9a f0       	brmi	.+38     	; 0x3d6 <__mulsf3_pse+0x88>
 3b0:	f1 f0       	breq	.+60     	; 0x3ee <__mulsf3_pse+0xa0>
 3b2:	88 23       	and	r24, r24
 3b4:	4a f0       	brmi	.+18     	; 0x3c8 <__mulsf3_pse+0x7a>
 3b6:	ee 0f       	add	r30, r30
 3b8:	ff 1f       	adc	r31, r31
 3ba:	bb 1f       	adc	r27, r27
 3bc:	66 1f       	adc	r22, r22
 3be:	77 1f       	adc	r23, r23
 3c0:	88 1f       	adc	r24, r24
 3c2:	91 50       	subi	r25, 0x01	; 1
 3c4:	50 40       	sbci	r21, 0x00	; 0
 3c6:	a9 f7       	brne	.-22     	; 0x3b2 <__mulsf3_pse+0x64>
 3c8:	9e 3f       	cpi	r25, 0xFE	; 254
 3ca:	51 05       	cpc	r21, r1
 3cc:	80 f0       	brcs	.+32     	; 0x3ee <__mulsf3_pse+0xa0>
 3ce:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__fp_inf>
 3d2:	0c 94 86 01 	jmp	0x30c	; 0x30c <__fp_szero>
 3d6:	5f 3f       	cpi	r21, 0xFF	; 255
 3d8:	e4 f3       	brlt	.-8      	; 0x3d2 <__mulsf3_pse+0x84>
 3da:	98 3e       	cpi	r25, 0xE8	; 232
 3dc:	d4 f3       	brlt	.-12     	; 0x3d2 <__mulsf3_pse+0x84>
 3de:	86 95       	lsr	r24
 3e0:	77 95       	ror	r23
 3e2:	67 95       	ror	r22
 3e4:	b7 95       	ror	r27
 3e6:	f7 95       	ror	r31
 3e8:	e7 95       	ror	r30
 3ea:	9f 5f       	subi	r25, 0xFF	; 255
 3ec:	c1 f7       	brne	.-16     	; 0x3de <__mulsf3_pse+0x90>
 3ee:	fe 2b       	or	r31, r30
 3f0:	88 0f       	add	r24, r24
 3f2:	91 1d       	adc	r25, r1
 3f4:	96 95       	lsr	r25
 3f6:	87 95       	ror	r24
 3f8:	97 f9       	bld	r25, 7
 3fa:	08 95       	ret

000003fc <__fp_inf>:
 3fc:	97 f9       	bld	r25, 7
 3fe:	9f 67       	ori	r25, 0x7F	; 127
 400:	80 e8       	ldi	r24, 0x80	; 128
 402:	70 e0       	ldi	r23, 0x00	; 0
 404:	60 e0       	ldi	r22, 0x00	; 0
 406:	08 95       	ret

00000408 <__fp_nan>:
 408:	9f ef       	ldi	r25, 0xFF	; 255
 40a:	80 ec       	ldi	r24, 0xC0	; 192
 40c:	08 95       	ret

0000040e <__fp_pscA>:
 40e:	00 24       	eor	r0, r0
 410:	0a 94       	dec	r0
 412:	16 16       	cp	r1, r22
 414:	17 06       	cpc	r1, r23
 416:	18 06       	cpc	r1, r24
 418:	09 06       	cpc	r0, r25
 41a:	08 95       	ret

0000041c <__fp_pscB>:
 41c:	00 24       	eor	r0, r0
 41e:	0a 94       	dec	r0
 420:	12 16       	cp	r1, r18
 422:	13 06       	cpc	r1, r19
 424:	14 06       	cpc	r1, r20
 426:	05 06       	cpc	r0, r21
 428:	08 95       	ret

0000042a <__fp_round>:
 42a:	09 2e       	mov	r0, r25
 42c:	03 94       	inc	r0
 42e:	00 0c       	add	r0, r0
 430:	11 f4       	brne	.+4      	; 0x436 <__fp_round+0xc>
 432:	88 23       	and	r24, r24
 434:	52 f0       	brmi	.+20     	; 0x44a <__fp_round+0x20>
 436:	bb 0f       	add	r27, r27
 438:	40 f4       	brcc	.+16     	; 0x44a <__fp_round+0x20>
 43a:	bf 2b       	or	r27, r31
 43c:	11 f4       	brne	.+4      	; 0x442 <__fp_round+0x18>
 43e:	60 ff       	sbrs	r22, 0
 440:	04 c0       	rjmp	.+8      	; 0x44a <__fp_round+0x20>
 442:	6f 5f       	subi	r22, 0xFF	; 255
 444:	7f 4f       	sbci	r23, 0xFF	; 255
 446:	8f 4f       	sbci	r24, 0xFF	; 255
 448:	9f 4f       	sbci	r25, 0xFF	; 255
 44a:	08 95       	ret

0000044c <__divmodhi4>:
 44c:	97 fb       	bst	r25, 7
 44e:	07 2e       	mov	r0, r23
 450:	16 f4       	brtc	.+4      	; 0x456 <__divmodhi4+0xa>
 452:	00 94       	com	r0
 454:	07 d0       	rcall	.+14     	; 0x464 <__divmodhi4_neg1>
 456:	77 fd       	sbrc	r23, 7
 458:	09 d0       	rcall	.+18     	; 0x46c <__divmodhi4_neg2>
 45a:	0e 94 3a 02 	call	0x474	; 0x474 <__udivmodhi4>
 45e:	07 fc       	sbrc	r0, 7
 460:	05 d0       	rcall	.+10     	; 0x46c <__divmodhi4_neg2>
 462:	3e f4       	brtc	.+14     	; 0x472 <__divmodhi4_exit>

00000464 <__divmodhi4_neg1>:
 464:	90 95       	com	r25
 466:	81 95       	neg	r24
 468:	9f 4f       	sbci	r25, 0xFF	; 255
 46a:	08 95       	ret

0000046c <__divmodhi4_neg2>:
 46c:	70 95       	com	r23
 46e:	61 95       	neg	r22
 470:	7f 4f       	sbci	r23, 0xFF	; 255

00000472 <__divmodhi4_exit>:
 472:	08 95       	ret

00000474 <__udivmodhi4>:
 474:	aa 1b       	sub	r26, r26
 476:	bb 1b       	sub	r27, r27
 478:	51 e1       	ldi	r21, 0x11	; 17
 47a:	07 c0       	rjmp	.+14     	; 0x48a <__udivmodhi4_ep>

0000047c <__udivmodhi4_loop>:
 47c:	aa 1f       	adc	r26, r26
 47e:	bb 1f       	adc	r27, r27
 480:	a6 17       	cp	r26, r22
 482:	b7 07       	cpc	r27, r23
 484:	10 f0       	brcs	.+4      	; 0x48a <__udivmodhi4_ep>
 486:	a6 1b       	sub	r26, r22
 488:	b7 0b       	sbc	r27, r23

0000048a <__udivmodhi4_ep>:
 48a:	88 1f       	adc	r24, r24
 48c:	99 1f       	adc	r25, r25
 48e:	5a 95       	dec	r21
 490:	a9 f7       	brne	.-22     	; 0x47c <__udivmodhi4_loop>
 492:	80 95       	com	r24
 494:	90 95       	com	r25
 496:	bc 01       	movw	r22, r24
 498:	cd 01       	movw	r24, r26
 49a:	08 95       	ret

0000049c <_exit>:
 49c:	f8 94       	cli

0000049e <__stop_program>:
 49e:	ff cf       	rjmp	.-2      	; 0x49e <__stop_program>
