
timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000014e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000fa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000014e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000180  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007d2  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000072e  00000000  00000000  000009ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000254  00000000  00000000  000010f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000007c  00000000  00000000  0000134c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d1  00000000  00000000  000013c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000bd  00000000  00000000  00001799  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001856  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
   4:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
   8:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
   c:	0c 94 42 00 	jmp	0x84	; 0x84 <__vector_3>
  10:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  14:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  18:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  1c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  20:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  24:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  28:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  2c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  30:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  34:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  38:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  3c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  40:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__vector_16>
  44:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  48:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  4c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  50:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  54:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  58:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  5c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  60:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  64:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  68:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d4 e0       	ldi	r29, 0x04	; 4
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61
  78:	0e 94 6d 00 	call	0xda	; 0xda <main>
  7c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <_exit>

00000080 <__bad_interrupt>:
  80:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000084 <__vector_3>:
#include <avr/io.h>
#include <avr/interrupt.h>


ISR(PCINT0_vect)
{
  84:	1f 92       	push	r1
  86:	0f 92       	push	r0
  88:	0f b6       	in	r0, 0x3f	; 63
  8a:	0f 92       	push	r0
  8c:	11 24       	eor	r1, r1
  8e:	8f 93       	push	r24
  90:	9f 93       	push	r25
PORTB ^= 0x20;
  92:	95 b1       	in	r25, 0x05	; 5
  94:	80 e2       	ldi	r24, 0x20	; 32
  96:	89 27       	eor	r24, r25
  98:	85 b9       	out	0x05, r24	; 5
}
  9a:	9f 91       	pop	r25
  9c:	8f 91       	pop	r24
  9e:	0f 90       	pop	r0
  a0:	0f be       	out	0x3f, r0	; 63
  a2:	0f 90       	pop	r0
  a4:	1f 90       	pop	r1
  a6:	18 95       	reti

000000a8 <__vector_16>:

ISR(TIMER0_OVF_vect)
{
  a8:	1f 92       	push	r1
  aa:	0f 92       	push	r0
  ac:	0f b6       	in	r0, 0x3f	; 63
  ae:	0f 92       	push	r0
  b0:	11 24       	eor	r1, r1
  b2:	8f 93       	push	r24
  b4:	9f 93       	push	r25
	PORTB ^= 0x20;
  b6:	95 b1       	in	r25, 0x05	; 5
  b8:	80 e2       	ldi	r24, 0x20	; 32
  ba:	89 27       	eor	r24, r25
  bc:	85 b9       	out	0x05, r24	; 5
}
  be:	9f 91       	pop	r25
  c0:	8f 91       	pop	r24
  c2:	0f 90       	pop	r0
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	0f 90       	pop	r0
  c8:	1f 90       	pop	r1
  ca:	18 95       	reti

000000cc <init>:


void init()
{
	
	TCCR0B |= 0b00000101;	 // Set the prescaler to 1024 division. See at the TC0 control register in the datasheet!
  cc:	85 b5       	in	r24, 0x25	; 37
  ce:	85 60       	ori	r24, 0x05	; 5
  d0:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0;						 // With this you also set the clock source to CLK_io and you will also turn on the timer!
  d2:	16 bc       	out	0x26, r1	; 38

	DDRB = 1 << 5;       // Set the PB5 LED pin to output
  d4:	80 e2       	ldi	r24, 0x20	; 32
  d6:	84 b9       	out	0x04, r24	; 4
  d8:	08 95       	ret

000000da <main>:

int main(void)
{
	uint8_t counter = 0;
	// Don't forget to call the init function!
	init();
  da:	0e 94 66 00 	call	0xcc	; 0xcc <init>
		if (TIFR0 & 1){
			counter++;
			TIFR0 |= 1;
		}
		if (counter > 29){
			PORTB ^= 1 << PORTB5;
  de:	90 e2       	ldi	r25, 0x20	; 32
	sei();
	*/
}

int main(void)
{
  e0:	80 e0       	ldi	r24, 0x00	; 0
	while (1)
	{
		// If TC0 counter overflow occurred (TOV0 flag is set) toggle the LED and write "1" to that flag
		// (this will clear it, it's confusing, but this is how it works)

		if (TIFR0 & 1){
  e2:	a8 9b       	sbis	0x15, 0	; 21
  e4:	02 c0       	rjmp	.+4      	; 0xea <main+0x10>
			counter++;
  e6:	8f 5f       	subi	r24, 0xFF	; 255
			TIFR0 |= 1;
  e8:	a8 9a       	sbi	0x15, 0	; 21
		}
		if (counter > 29){
  ea:	8e 31       	cpi	r24, 0x1E	; 30
  ec:	d0 f3       	brcs	.-12     	; 0xe2 <main+0x8>
			PORTB ^= 1 << PORTB5;
  ee:	85 b1       	in	r24, 0x05	; 5
  f0:	89 27       	eor	r24, r25
  f2:	85 b9       	out	0x05, r24	; 5
  f4:	f5 cf       	rjmp	.-22     	; 0xe0 <main+0x6>

000000f6 <_exit>:
  f6:	f8 94       	cli

000000f8 <__stop_program>:
  f8:	ff cf       	rjmp	.-2      	; 0xf8 <__stop_program>
