
first_applications.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000049a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000446  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000049a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000050c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008b6  00000000  00000000  00000534  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000790  00000000  00000000  00000dea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000308  00000000  00000000  0000157a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001884  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000431  00000000  00000000  000018d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000008e  00000000  00000000  00001d09  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001d97  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
   4:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
   8:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
   c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  10:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  14:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  18:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  1c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  20:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  24:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  28:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  2c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  30:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  34:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  38:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  3c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  40:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  44:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  48:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  4c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  50:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  54:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  58:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  5c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  60:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  64:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  68:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d4 e0       	ldi	r29, 0x04	; 4
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61
  78:	0e 94 42 00 	call	0x84	; 0x84 <main>
  7c:	0c 94 21 02 	jmp	0x442	; 0x442 <_exit>

00000080 <__bad_interrupt>:
  80:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000084 <main>:
	uint32_t max = millisec * 512;
	for (uint32_t i = 0; i < max; i++){}
}

int main(void)
{
  84:	cf 93       	push	r28
  86:	df 93       	push	r29
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
  8c:	63 97       	sbiw	r28, 0x13	; 19
  8e:	0f b6       	in	r0, 0x3f	; 63
  90:	f8 94       	cli
  92:	de bf       	out	0x3e, r29	; 62
  94:	0f be       	out	0x3f, r0	; 63
  96:	cd bf       	out	0x3d, r28	; 61
	DDRB &= 0b01111111;
  98:	84 e2       	ldi	r24, 0x24	; 36
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	24 e2       	ldi	r18, 0x24	; 36
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	f9 01       	movw	r30, r18
  a2:	20 81       	ld	r18, Z
  a4:	2f 77       	andi	r18, 0x7F	; 127
  a6:	fc 01       	movw	r30, r24
  a8:	20 83       	st	Z, r18
	PORTB = 0b10000000; 
  aa:	85 e2       	ldi	r24, 0x25	; 37
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	20 e8       	ldi	r18, 0x80	; 128
  b0:	fc 01       	movw	r30, r24
  b2:	20 83       	st	Z, r18
	uint32_t temp = PINB & 0x80;
  b4:	83 e2       	ldi	r24, 0x23	; 35
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	fc 01       	movw	r30, r24
  ba:	80 81       	ld	r24, Z
  bc:	88 2f       	mov	r24, r24
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	a0 e0       	ldi	r26, 0x00	; 0
  c2:	b0 e0       	ldi	r27, 0x00	; 0
  c4:	80 78       	andi	r24, 0x80	; 128
  c6:	99 27       	eor	r25, r25
  c8:	aa 27       	eor	r26, r26
  ca:	bb 27       	eor	r27, r27
  cc:	89 83       	std	Y+1, r24	; 0x01
  ce:	9a 83       	std	Y+2, r25	; 0x02
  d0:	ab 83       	std	Y+3, r26	; 0x03
  d2:	bc 83       	std	Y+4, r27	; 0x04
    /* Replace with your application code */
    while (1) 
    {
		DDRB |= 0x20;
  d4:	84 e2       	ldi	r24, 0x24	; 36
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	24 e2       	ldi	r18, 0x24	; 36
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	f9 01       	movw	r30, r18
  de:	20 81       	ld	r18, Z
  e0:	20 62       	ori	r18, 0x20	; 32
  e2:	fc 01       	movw	r30, r24
  e4:	20 83       	st	Z, r18
		uint8_t counter = 0;
  e6:	1d 82       	std	Y+5, r1	; 0x05
		//if (!(PINB & 0x80) || temp == 0 ){
		if (!(PINB & 0x80) && counter < 5)
  e8:	83 e2       	ldi	r24, 0x23	; 35
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	fc 01       	movw	r30, r24
  ee:	80 81       	ld	r24, Z
  f0:	88 23       	and	r24, r24
  f2:	6c f0       	brlt	.+26     	; 0x10e <main+0x8a>
  f4:	8d 81       	ldd	r24, Y+5	; 0x05
  f6:	85 30       	cpi	r24, 0x05	; 5
  f8:	50 f4       	brcc	.+20     	; 0x10e <main+0x8a>
			//myDelay(500);
			PORTB = PORTB ^ 0X20;
  fa:	85 e2       	ldi	r24, 0x25	; 37
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	25 e2       	ldi	r18, 0x25	; 37
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	f9 01       	movw	r30, r18
 104:	30 81       	ld	r19, Z
 106:	20 e2       	ldi	r18, 0x20	; 32
 108:	23 27       	eor	r18, r19
 10a:	fc 01       	movw	r30, r24
 10c:	20 83       	st	Z, r18
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	aa ef       	ldi	r26, 0xFA	; 250
 114:	b3 e4       	ldi	r27, 0x43	; 67
 116:	8e 83       	std	Y+6, r24	; 0x06
 118:	9f 83       	std	Y+7, r25	; 0x07
 11a:	a8 87       	std	Y+8, r26	; 0x08
 11c:	b9 87       	std	Y+9, r27	; 0x09

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 11e:	20 e0       	ldi	r18, 0x00	; 0
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	4a e7       	ldi	r20, 0x7A	; 122
 124:	53 e4       	ldi	r21, 0x43	; 67
 126:	6e 81       	ldd	r22, Y+6	; 0x06
 128:	7f 81       	ldd	r23, Y+7	; 0x07
 12a:	88 85       	ldd	r24, Y+8	; 0x08
 12c:	99 85       	ldd	r25, Y+9	; 0x09
 12e:	0e 94 8c 01 	call	0x318	; 0x318 <__mulsf3>
 132:	dc 01       	movw	r26, r24
 134:	cb 01       	movw	r24, r22
 136:	8a 87       	std	Y+10, r24	; 0x0a
 138:	9b 87       	std	Y+11, r25	; 0x0b
 13a:	ac 87       	std	Y+12, r26	; 0x0c
 13c:	bd 87       	std	Y+13, r27	; 0x0d
	if (__tmp < 1.0)
 13e:	20 e0       	ldi	r18, 0x00	; 0
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	40 e8       	ldi	r20, 0x80	; 128
 144:	5f e3       	ldi	r21, 0x3F	; 63
 146:	6a 85       	ldd	r22, Y+10	; 0x0a
 148:	7b 85       	ldd	r23, Y+11	; 0x0b
 14a:	8c 85       	ldd	r24, Y+12	; 0x0c
 14c:	9d 85       	ldd	r25, Y+13	; 0x0d
 14e:	0e 94 06 01 	call	0x20c	; 0x20c <__cmpsf2>
 152:	88 23       	and	r24, r24
 154:	2c f4       	brge	.+10     	; 0x160 <main+0xdc>
		__ticks = 1;
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	9f 87       	std	Y+15, r25	; 0x0f
 15c:	8e 87       	std	Y+14, r24	; 0x0e
 15e:	3f c0       	rjmp	.+126    	; 0x1de <main+0x15a>
	else if (__tmp > 65535)
 160:	20 e0       	ldi	r18, 0x00	; 0
 162:	3f ef       	ldi	r19, 0xFF	; 255
 164:	4f e7       	ldi	r20, 0x7F	; 127
 166:	57 e4       	ldi	r21, 0x47	; 71
 168:	6a 85       	ldd	r22, Y+10	; 0x0a
 16a:	7b 85       	ldd	r23, Y+11	; 0x0b
 16c:	8c 85       	ldd	r24, Y+12	; 0x0c
 16e:	9d 85       	ldd	r25, Y+13	; 0x0d
 170:	0e 94 87 01 	call	0x30e	; 0x30e <__gesf2>
 174:	18 16       	cp	r1, r24
 176:	4c f5       	brge	.+82     	; 0x1ca <main+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 178:	20 e0       	ldi	r18, 0x00	; 0
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	40 e2       	ldi	r20, 0x20	; 32
 17e:	51 e4       	ldi	r21, 0x41	; 65
 180:	6e 81       	ldd	r22, Y+6	; 0x06
 182:	7f 81       	ldd	r23, Y+7	; 0x07
 184:	88 85       	ldd	r24, Y+8	; 0x08
 186:	99 85       	ldd	r25, Y+9	; 0x09
 188:	0e 94 8c 01 	call	0x318	; 0x318 <__mulsf3>
 18c:	dc 01       	movw	r26, r24
 18e:	cb 01       	movw	r24, r22
 190:	bc 01       	movw	r22, r24
 192:	cd 01       	movw	r24, r26
 194:	0e 94 0b 01 	call	0x216	; 0x216 <__fixunssfsi>
 198:	dc 01       	movw	r26, r24
 19a:	cb 01       	movw	r24, r22
 19c:	9f 87       	std	Y+15, r25	; 0x0f
 19e:	8e 87       	std	Y+14, r24	; 0x0e
 1a0:	0f c0       	rjmp	.+30     	; 0x1c0 <main+0x13c>
 1a2:	89 e1       	ldi	r24, 0x19	; 25
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	99 8b       	std	Y+17, r25	; 0x11
 1a8:	88 8b       	std	Y+16, r24	; 0x10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1aa:	88 89       	ldd	r24, Y+16	; 0x10
 1ac:	99 89       	ldd	r25, Y+17	; 0x11
 1ae:	01 97       	sbiw	r24, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <main+0x12a>
 1b2:	99 8b       	std	Y+17, r25	; 0x11
 1b4:	88 8b       	std	Y+16, r24	; 0x10
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1b6:	8e 85       	ldd	r24, Y+14	; 0x0e
 1b8:	9f 85       	ldd	r25, Y+15	; 0x0f
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	9f 87       	std	Y+15, r25	; 0x0f
 1be:	8e 87       	std	Y+14, r24	; 0x0e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1c0:	8e 85       	ldd	r24, Y+14	; 0x0e
 1c2:	9f 85       	ldd	r25, Y+15	; 0x0f
 1c4:	89 2b       	or	r24, r25
 1c6:	69 f7       	brne	.-38     	; 0x1a2 <main+0x11e>
 1c8:	14 c0       	rjmp	.+40     	; 0x1f2 <main+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1ca:	6a 85       	ldd	r22, Y+10	; 0x0a
 1cc:	7b 85       	ldd	r23, Y+11	; 0x0b
 1ce:	8c 85       	ldd	r24, Y+12	; 0x0c
 1d0:	9d 85       	ldd	r25, Y+13	; 0x0d
 1d2:	0e 94 0b 01 	call	0x216	; 0x216 <__fixunssfsi>
 1d6:	dc 01       	movw	r26, r24
 1d8:	cb 01       	movw	r24, r22
 1da:	9f 87       	std	Y+15, r25	; 0x0f
 1dc:	8e 87       	std	Y+14, r24	; 0x0e
 1de:	8e 85       	ldd	r24, Y+14	; 0x0e
 1e0:	9f 85       	ldd	r25, Y+15	; 0x0f
 1e2:	9b 8b       	std	Y+19, r25	; 0x13
 1e4:	8a 8b       	std	Y+18, r24	; 0x12
 1e6:	8a 89       	ldd	r24, Y+18	; 0x12
 1e8:	9b 89       	ldd	r25, Y+19	; 0x13
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <main+0x166>
 1ee:	9b 8b       	std	Y+19, r25	; 0x13
 1f0:	8a 8b       	std	Y+18, r24	; 0x12
			_delay_ms(500);
			
			if (counter == 4){
 1f2:	8d 81       	ldd	r24, Y+5	; 0x05
 1f4:	84 30       	cpi	r24, 0x04	; 4
 1f6:	31 f4       	brne	.+12     	; 0x204 <main+0x180>
			 PORTB = 0x20;
 1f8:	85 e2       	ldi	r24, 0x25	; 37
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	20 e2       	ldi	r18, 0x20	; 32
 1fe:	fc 01       	movw	r30, r24
 200:	20 83       	st	Z, r18
 202:	68 cf       	rjmp	.-304    	; 0xd4 <main+0x50>
			}else {
				counter++;	
 204:	8d 81       	ldd	r24, Y+5	; 0x05
 206:	8f 5f       	subi	r24, 0xFF	; 255
 208:	8d 83       	std	Y+5, r24	; 0x05
			}
			
		
    }
 20a:	64 cf       	rjmp	.-312    	; 0xd4 <main+0x50>

0000020c <__cmpsf2>:
 20c:	0e 94 3a 01 	call	0x274	; 0x274 <__fp_cmp>
 210:	08 f4       	brcc	.+2      	; 0x214 <__cmpsf2+0x8>
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	08 95       	ret

00000216 <__fixunssfsi>:
 216:	0e 94 66 01 	call	0x2cc	; 0x2cc <__fp_splitA>
 21a:	88 f0       	brcs	.+34     	; 0x23e <__fixunssfsi+0x28>
 21c:	9f 57       	subi	r25, 0x7F	; 127
 21e:	98 f0       	brcs	.+38     	; 0x246 <__fixunssfsi+0x30>
 220:	b9 2f       	mov	r27, r25
 222:	99 27       	eor	r25, r25
 224:	b7 51       	subi	r27, 0x17	; 23
 226:	b0 f0       	brcs	.+44     	; 0x254 <__fixunssfsi+0x3e>
 228:	e1 f0       	breq	.+56     	; 0x262 <__fixunssfsi+0x4c>
 22a:	66 0f       	add	r22, r22
 22c:	77 1f       	adc	r23, r23
 22e:	88 1f       	adc	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	1a f0       	brmi	.+6      	; 0x23a <__fixunssfsi+0x24>
 234:	ba 95       	dec	r27
 236:	c9 f7       	brne	.-14     	; 0x22a <__fixunssfsi+0x14>
 238:	14 c0       	rjmp	.+40     	; 0x262 <__fixunssfsi+0x4c>
 23a:	b1 30       	cpi	r27, 0x01	; 1
 23c:	91 f0       	breq	.+36     	; 0x262 <__fixunssfsi+0x4c>
 23e:	0e 94 80 01 	call	0x300	; 0x300 <__fp_zero>
 242:	b1 e0       	ldi	r27, 0x01	; 1
 244:	08 95       	ret
 246:	0c 94 80 01 	jmp	0x300	; 0x300 <__fp_zero>
 24a:	67 2f       	mov	r22, r23
 24c:	78 2f       	mov	r23, r24
 24e:	88 27       	eor	r24, r24
 250:	b8 5f       	subi	r27, 0xF8	; 248
 252:	39 f0       	breq	.+14     	; 0x262 <__fixunssfsi+0x4c>
 254:	b9 3f       	cpi	r27, 0xF9	; 249
 256:	cc f3       	brlt	.-14     	; 0x24a <__fixunssfsi+0x34>
 258:	86 95       	lsr	r24
 25a:	77 95       	ror	r23
 25c:	67 95       	ror	r22
 25e:	b3 95       	inc	r27
 260:	d9 f7       	brne	.-10     	; 0x258 <__fixunssfsi+0x42>
 262:	3e f4       	brtc	.+14     	; 0x272 <__fixunssfsi+0x5c>
 264:	90 95       	com	r25
 266:	80 95       	com	r24
 268:	70 95       	com	r23
 26a:	61 95       	neg	r22
 26c:	7f 4f       	sbci	r23, 0xFF	; 255
 26e:	8f 4f       	sbci	r24, 0xFF	; 255
 270:	9f 4f       	sbci	r25, 0xFF	; 255
 272:	08 95       	ret

00000274 <__fp_cmp>:
 274:	99 0f       	add	r25, r25
 276:	00 08       	sbc	r0, r0
 278:	55 0f       	add	r21, r21
 27a:	aa 0b       	sbc	r26, r26
 27c:	e0 e8       	ldi	r30, 0x80	; 128
 27e:	fe ef       	ldi	r31, 0xFE	; 254
 280:	16 16       	cp	r1, r22
 282:	17 06       	cpc	r1, r23
 284:	e8 07       	cpc	r30, r24
 286:	f9 07       	cpc	r31, r25
 288:	c0 f0       	brcs	.+48     	; 0x2ba <__fp_cmp+0x46>
 28a:	12 16       	cp	r1, r18
 28c:	13 06       	cpc	r1, r19
 28e:	e4 07       	cpc	r30, r20
 290:	f5 07       	cpc	r31, r21
 292:	98 f0       	brcs	.+38     	; 0x2ba <__fp_cmp+0x46>
 294:	62 1b       	sub	r22, r18
 296:	73 0b       	sbc	r23, r19
 298:	84 0b       	sbc	r24, r20
 29a:	95 0b       	sbc	r25, r21
 29c:	39 f4       	brne	.+14     	; 0x2ac <__fp_cmp+0x38>
 29e:	0a 26       	eor	r0, r26
 2a0:	61 f0       	breq	.+24     	; 0x2ba <__fp_cmp+0x46>
 2a2:	23 2b       	or	r18, r19
 2a4:	24 2b       	or	r18, r20
 2a6:	25 2b       	or	r18, r21
 2a8:	21 f4       	brne	.+8      	; 0x2b2 <__fp_cmp+0x3e>
 2aa:	08 95       	ret
 2ac:	0a 26       	eor	r0, r26
 2ae:	09 f4       	brne	.+2      	; 0x2b2 <__fp_cmp+0x3e>
 2b0:	a1 40       	sbci	r26, 0x01	; 1
 2b2:	a6 95       	lsr	r26
 2b4:	8f ef       	ldi	r24, 0xFF	; 255
 2b6:	81 1d       	adc	r24, r1
 2b8:	81 1d       	adc	r24, r1
 2ba:	08 95       	ret

000002bc <__fp_split3>:
 2bc:	57 fd       	sbrc	r21, 7
 2be:	90 58       	subi	r25, 0x80	; 128
 2c0:	44 0f       	add	r20, r20
 2c2:	55 1f       	adc	r21, r21
 2c4:	59 f0       	breq	.+22     	; 0x2dc <__fp_splitA+0x10>
 2c6:	5f 3f       	cpi	r21, 0xFF	; 255
 2c8:	71 f0       	breq	.+28     	; 0x2e6 <__fp_splitA+0x1a>
 2ca:	47 95       	ror	r20

000002cc <__fp_splitA>:
 2cc:	88 0f       	add	r24, r24
 2ce:	97 fb       	bst	r25, 7
 2d0:	99 1f       	adc	r25, r25
 2d2:	61 f0       	breq	.+24     	; 0x2ec <__fp_splitA+0x20>
 2d4:	9f 3f       	cpi	r25, 0xFF	; 255
 2d6:	79 f0       	breq	.+30     	; 0x2f6 <__fp_splitA+0x2a>
 2d8:	87 95       	ror	r24
 2da:	08 95       	ret
 2dc:	12 16       	cp	r1, r18
 2de:	13 06       	cpc	r1, r19
 2e0:	14 06       	cpc	r1, r20
 2e2:	55 1f       	adc	r21, r21
 2e4:	f2 cf       	rjmp	.-28     	; 0x2ca <__fp_split3+0xe>
 2e6:	46 95       	lsr	r20
 2e8:	f1 df       	rcall	.-30     	; 0x2cc <__fp_splitA>
 2ea:	08 c0       	rjmp	.+16     	; 0x2fc <__fp_splitA+0x30>
 2ec:	16 16       	cp	r1, r22
 2ee:	17 06       	cpc	r1, r23
 2f0:	18 06       	cpc	r1, r24
 2f2:	99 1f       	adc	r25, r25
 2f4:	f1 cf       	rjmp	.-30     	; 0x2d8 <__fp_splitA+0xc>
 2f6:	86 95       	lsr	r24
 2f8:	71 05       	cpc	r23, r1
 2fa:	61 05       	cpc	r22, r1
 2fc:	08 94       	sec
 2fe:	08 95       	ret

00000300 <__fp_zero>:
 300:	e8 94       	clt

00000302 <__fp_szero>:
 302:	bb 27       	eor	r27, r27
 304:	66 27       	eor	r22, r22
 306:	77 27       	eor	r23, r23
 308:	cb 01       	movw	r24, r22
 30a:	97 f9       	bld	r25, 7
 30c:	08 95       	ret

0000030e <__gesf2>:
 30e:	0e 94 3a 01 	call	0x274	; 0x274 <__fp_cmp>
 312:	08 f4       	brcc	.+2      	; 0x316 <__gesf2+0x8>
 314:	8f ef       	ldi	r24, 0xFF	; 255
 316:	08 95       	ret

00000318 <__mulsf3>:
 318:	0e 94 9f 01 	call	0x33e	; 0x33e <__mulsf3x>
 31c:	0c 94 10 02 	jmp	0x420	; 0x420 <__fp_round>
 320:	0e 94 02 02 	call	0x404	; 0x404 <__fp_pscA>
 324:	38 f0       	brcs	.+14     	; 0x334 <__mulsf3+0x1c>
 326:	0e 94 09 02 	call	0x412	; 0x412 <__fp_pscB>
 32a:	20 f0       	brcs	.+8      	; 0x334 <__mulsf3+0x1c>
 32c:	95 23       	and	r25, r21
 32e:	11 f0       	breq	.+4      	; 0x334 <__mulsf3+0x1c>
 330:	0c 94 f9 01 	jmp	0x3f2	; 0x3f2 <__fp_inf>
 334:	0c 94 ff 01 	jmp	0x3fe	; 0x3fe <__fp_nan>
 338:	11 24       	eor	r1, r1
 33a:	0c 94 81 01 	jmp	0x302	; 0x302 <__fp_szero>

0000033e <__mulsf3x>:
 33e:	0e 94 5e 01 	call	0x2bc	; 0x2bc <__fp_split3>
 342:	70 f3       	brcs	.-36     	; 0x320 <__mulsf3+0x8>

00000344 <__mulsf3_pse>:
 344:	95 9f       	mul	r25, r21
 346:	c1 f3       	breq	.-16     	; 0x338 <__mulsf3+0x20>
 348:	95 0f       	add	r25, r21
 34a:	50 e0       	ldi	r21, 0x00	; 0
 34c:	55 1f       	adc	r21, r21
 34e:	62 9f       	mul	r22, r18
 350:	f0 01       	movw	r30, r0
 352:	72 9f       	mul	r23, r18
 354:	bb 27       	eor	r27, r27
 356:	f0 0d       	add	r31, r0
 358:	b1 1d       	adc	r27, r1
 35a:	63 9f       	mul	r22, r19
 35c:	aa 27       	eor	r26, r26
 35e:	f0 0d       	add	r31, r0
 360:	b1 1d       	adc	r27, r1
 362:	aa 1f       	adc	r26, r26
 364:	64 9f       	mul	r22, r20
 366:	66 27       	eor	r22, r22
 368:	b0 0d       	add	r27, r0
 36a:	a1 1d       	adc	r26, r1
 36c:	66 1f       	adc	r22, r22
 36e:	82 9f       	mul	r24, r18
 370:	22 27       	eor	r18, r18
 372:	b0 0d       	add	r27, r0
 374:	a1 1d       	adc	r26, r1
 376:	62 1f       	adc	r22, r18
 378:	73 9f       	mul	r23, r19
 37a:	b0 0d       	add	r27, r0
 37c:	a1 1d       	adc	r26, r1
 37e:	62 1f       	adc	r22, r18
 380:	83 9f       	mul	r24, r19
 382:	a0 0d       	add	r26, r0
 384:	61 1d       	adc	r22, r1
 386:	22 1f       	adc	r18, r18
 388:	74 9f       	mul	r23, r20
 38a:	33 27       	eor	r19, r19
 38c:	a0 0d       	add	r26, r0
 38e:	61 1d       	adc	r22, r1
 390:	23 1f       	adc	r18, r19
 392:	84 9f       	mul	r24, r20
 394:	60 0d       	add	r22, r0
 396:	21 1d       	adc	r18, r1
 398:	82 2f       	mov	r24, r18
 39a:	76 2f       	mov	r23, r22
 39c:	6a 2f       	mov	r22, r26
 39e:	11 24       	eor	r1, r1
 3a0:	9f 57       	subi	r25, 0x7F	; 127
 3a2:	50 40       	sbci	r21, 0x00	; 0
 3a4:	9a f0       	brmi	.+38     	; 0x3cc <__mulsf3_pse+0x88>
 3a6:	f1 f0       	breq	.+60     	; 0x3e4 <__mulsf3_pse+0xa0>
 3a8:	88 23       	and	r24, r24
 3aa:	4a f0       	brmi	.+18     	; 0x3be <__mulsf3_pse+0x7a>
 3ac:	ee 0f       	add	r30, r30
 3ae:	ff 1f       	adc	r31, r31
 3b0:	bb 1f       	adc	r27, r27
 3b2:	66 1f       	adc	r22, r22
 3b4:	77 1f       	adc	r23, r23
 3b6:	88 1f       	adc	r24, r24
 3b8:	91 50       	subi	r25, 0x01	; 1
 3ba:	50 40       	sbci	r21, 0x00	; 0
 3bc:	a9 f7       	brne	.-22     	; 0x3a8 <__mulsf3_pse+0x64>
 3be:	9e 3f       	cpi	r25, 0xFE	; 254
 3c0:	51 05       	cpc	r21, r1
 3c2:	80 f0       	brcs	.+32     	; 0x3e4 <__mulsf3_pse+0xa0>
 3c4:	0c 94 f9 01 	jmp	0x3f2	; 0x3f2 <__fp_inf>
 3c8:	0c 94 81 01 	jmp	0x302	; 0x302 <__fp_szero>
 3cc:	5f 3f       	cpi	r21, 0xFF	; 255
 3ce:	e4 f3       	brlt	.-8      	; 0x3c8 <__mulsf3_pse+0x84>
 3d0:	98 3e       	cpi	r25, 0xE8	; 232
 3d2:	d4 f3       	brlt	.-12     	; 0x3c8 <__mulsf3_pse+0x84>
 3d4:	86 95       	lsr	r24
 3d6:	77 95       	ror	r23
 3d8:	67 95       	ror	r22
 3da:	b7 95       	ror	r27
 3dc:	f7 95       	ror	r31
 3de:	e7 95       	ror	r30
 3e0:	9f 5f       	subi	r25, 0xFF	; 255
 3e2:	c1 f7       	brne	.-16     	; 0x3d4 <__mulsf3_pse+0x90>
 3e4:	fe 2b       	or	r31, r30
 3e6:	88 0f       	add	r24, r24
 3e8:	91 1d       	adc	r25, r1
 3ea:	96 95       	lsr	r25
 3ec:	87 95       	ror	r24
 3ee:	97 f9       	bld	r25, 7
 3f0:	08 95       	ret

000003f2 <__fp_inf>:
 3f2:	97 f9       	bld	r25, 7
 3f4:	9f 67       	ori	r25, 0x7F	; 127
 3f6:	80 e8       	ldi	r24, 0x80	; 128
 3f8:	70 e0       	ldi	r23, 0x00	; 0
 3fa:	60 e0       	ldi	r22, 0x00	; 0
 3fc:	08 95       	ret

000003fe <__fp_nan>:
 3fe:	9f ef       	ldi	r25, 0xFF	; 255
 400:	80 ec       	ldi	r24, 0xC0	; 192
 402:	08 95       	ret

00000404 <__fp_pscA>:
 404:	00 24       	eor	r0, r0
 406:	0a 94       	dec	r0
 408:	16 16       	cp	r1, r22
 40a:	17 06       	cpc	r1, r23
 40c:	18 06       	cpc	r1, r24
 40e:	09 06       	cpc	r0, r25
 410:	08 95       	ret

00000412 <__fp_pscB>:
 412:	00 24       	eor	r0, r0
 414:	0a 94       	dec	r0
 416:	12 16       	cp	r1, r18
 418:	13 06       	cpc	r1, r19
 41a:	14 06       	cpc	r1, r20
 41c:	05 06       	cpc	r0, r21
 41e:	08 95       	ret

00000420 <__fp_round>:
 420:	09 2e       	mov	r0, r25
 422:	03 94       	inc	r0
 424:	00 0c       	add	r0, r0
 426:	11 f4       	brne	.+4      	; 0x42c <__fp_round+0xc>
 428:	88 23       	and	r24, r24
 42a:	52 f0       	brmi	.+20     	; 0x440 <__fp_round+0x20>
 42c:	bb 0f       	add	r27, r27
 42e:	40 f4       	brcc	.+16     	; 0x440 <__fp_round+0x20>
 430:	bf 2b       	or	r27, r31
 432:	11 f4       	brne	.+4      	; 0x438 <__fp_round+0x18>
 434:	60 ff       	sbrs	r22, 0
 436:	04 c0       	rjmp	.+8      	; 0x440 <__fp_round+0x20>
 438:	6f 5f       	subi	r22, 0xFF	; 255
 43a:	7f 4f       	sbci	r23, 0xFF	; 255
 43c:	8f 4f       	sbci	r24, 0xFF	; 255
 43e:	9f 4f       	sbci	r25, 0xFF	; 255
 440:	08 95       	ret

00000442 <_exit>:
 442:	f8 94       	cli

00000444 <__stop_program>:
 444:	ff cf       	rjmp	.-2      	; 0x444 <__stop_program>
