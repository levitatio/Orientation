
first_applications.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000021a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000021a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000024c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007de  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000733  00000000  00000000  00000a92  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000232  00000000  00000000  000011c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000013f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e6  00000000  00000000  0000144c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000008f  00000000  00000000  00001832  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000018c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
   4:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
   8:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
   c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  10:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  14:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  18:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  1c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  20:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  24:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  28:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  2c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  30:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  34:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  38:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  3c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  40:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  44:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  48:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  4c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  50:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  54:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  58:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  5c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  60:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  64:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  68:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d4 e0       	ldi	r29, 0x04	; 4
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61
  78:	0e 94 88 00 	call	0x110	; 0x110 <main>
  7c:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <_exit>

00000080 <__bad_interrupt>:
  80:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000084 <myDelay>:
 */ 

#include <avr/io.h>

void myDelay (uint32_t millisec)
{
  84:	cf 93       	push	r28
  86:	df 93       	push	r29
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
  8c:	2c 97       	sbiw	r28, 0x0c	; 12
  8e:	0f b6       	in	r0, 0x3f	; 63
  90:	f8 94       	cli
  92:	de bf       	out	0x3e, r29	; 62
  94:	0f be       	out	0x3f, r0	; 63
  96:	cd bf       	out	0x3d, r28	; 61
  98:	69 87       	std	Y+9, r22	; 0x09
  9a:	7a 87       	std	Y+10, r23	; 0x0a
  9c:	8b 87       	std	Y+11, r24	; 0x0b
  9e:	9c 87       	std	Y+12, r25	; 0x0c
	uint32_t max = millisec * 512;
  a0:	89 85       	ldd	r24, Y+9	; 0x09
  a2:	9a 85       	ldd	r25, Y+10	; 0x0a
  a4:	ab 85       	ldd	r26, Y+11	; 0x0b
  a6:	bc 85       	ldd	r27, Y+12	; 0x0c
  a8:	07 2e       	mov	r0, r23
  aa:	79 e0       	ldi	r23, 0x09	; 9
  ac:	88 0f       	add	r24, r24
  ae:	99 1f       	adc	r25, r25
  b0:	aa 1f       	adc	r26, r26
  b2:	bb 1f       	adc	r27, r27
  b4:	7a 95       	dec	r23
  b6:	d1 f7       	brne	.-12     	; 0xac <myDelay+0x28>
  b8:	70 2d       	mov	r23, r0
  ba:	8d 83       	std	Y+5, r24	; 0x05
  bc:	9e 83       	std	Y+6, r25	; 0x06
  be:	af 83       	std	Y+7, r26	; 0x07
  c0:	b8 87       	std	Y+8, r27	; 0x08
	for (uint32_t i = 0; i < max; i++){}
  c2:	19 82       	std	Y+1, r1	; 0x01
  c4:	1a 82       	std	Y+2, r1	; 0x02
  c6:	1b 82       	std	Y+3, r1	; 0x03
  c8:	1c 82       	std	Y+4, r1	; 0x04
  ca:	0b c0       	rjmp	.+22     	; 0xe2 <myDelay+0x5e>
  cc:	89 81       	ldd	r24, Y+1	; 0x01
  ce:	9a 81       	ldd	r25, Y+2	; 0x02
  d0:	ab 81       	ldd	r26, Y+3	; 0x03
  d2:	bc 81       	ldd	r27, Y+4	; 0x04
  d4:	01 96       	adiw	r24, 0x01	; 1
  d6:	a1 1d       	adc	r26, r1
  d8:	b1 1d       	adc	r27, r1
  da:	89 83       	std	Y+1, r24	; 0x01
  dc:	9a 83       	std	Y+2, r25	; 0x02
  de:	ab 83       	std	Y+3, r26	; 0x03
  e0:	bc 83       	std	Y+4, r27	; 0x04
  e2:	29 81       	ldd	r18, Y+1	; 0x01
  e4:	3a 81       	ldd	r19, Y+2	; 0x02
  e6:	4b 81       	ldd	r20, Y+3	; 0x03
  e8:	5c 81       	ldd	r21, Y+4	; 0x04
  ea:	8d 81       	ldd	r24, Y+5	; 0x05
  ec:	9e 81       	ldd	r25, Y+6	; 0x06
  ee:	af 81       	ldd	r26, Y+7	; 0x07
  f0:	b8 85       	ldd	r27, Y+8	; 0x08
  f2:	28 17       	cp	r18, r24
  f4:	39 07       	cpc	r19, r25
  f6:	4a 07       	cpc	r20, r26
  f8:	5b 07       	cpc	r21, r27
  fa:	40 f3       	brcs	.-48     	; 0xcc <myDelay+0x48>
}
  fc:	00 00       	nop
  fe:	2c 96       	adiw	r28, 0x0c	; 12
 100:	0f b6       	in	r0, 0x3f	; 63
 102:	f8 94       	cli
 104:	de bf       	out	0x3e, r29	; 62
 106:	0f be       	out	0x3f, r0	; 63
 108:	cd bf       	out	0x3d, r28	; 61
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <main>:

int main(void)
{
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	00 d0       	rcall	.+0      	; 0x116 <main+0x6>
 116:	00 d0       	rcall	.+0      	; 0x118 <main+0x8>
 118:	cd b7       	in	r28, 0x3d	; 61
 11a:	de b7       	in	r29, 0x3e	; 62
	DDRB &= 0b01111111;
 11c:	84 e2       	ldi	r24, 0x24	; 36
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	24 e2       	ldi	r18, 0x24	; 36
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	f9 01       	movw	r30, r18
 126:	20 81       	ld	r18, Z
 128:	2f 77       	andi	r18, 0x7F	; 127
 12a:	fc 01       	movw	r30, r24
 12c:	20 83       	st	Z, r18
	PORTB |= 0b10000000; 
 12e:	85 e2       	ldi	r24, 0x25	; 37
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	25 e2       	ldi	r18, 0x25	; 37
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	f9 01       	movw	r30, r18
 138:	20 81       	ld	r18, Z
 13a:	20 68       	ori	r18, 0x80	; 128
 13c:	fc 01       	movw	r30, r24
 13e:	20 83       	st	Z, r18
	uint32_t temp = PINB & 0x80;
 140:	83 e2       	ldi	r24, 0x23	; 35
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	fc 01       	movw	r30, r24
 146:	80 81       	ld	r24, Z
 148:	88 2f       	mov	r24, r24
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	a0 e0       	ldi	r26, 0x00	; 0
 14e:	b0 e0       	ldi	r27, 0x00	; 0
 150:	80 78       	andi	r24, 0x80	; 128
 152:	99 27       	eor	r25, r25
 154:	aa 27       	eor	r26, r26
 156:	bb 27       	eor	r27, r27
 158:	89 83       	std	Y+1, r24	; 0x01
 15a:	9a 83       	std	Y+2, r25	; 0x02
 15c:	ab 83       	std	Y+3, r26	; 0x03
 15e:	bc 83       	std	Y+4, r27	; 0x04
    /* Replace with your application code */
    while (1) 
    {
		DDRB |= 0x20;
 160:	84 e2       	ldi	r24, 0x24	; 36
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	24 e2       	ldi	r18, 0x24	; 36
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	f9 01       	movw	r30, r18
 16a:	20 81       	ld	r18, Z
 16c:	20 62       	ori	r18, 0x20	; 32
 16e:	fc 01       	movw	r30, r24
 170:	20 83       	st	Z, r18
		if (temp != (PINB & 0x80)){
 172:	83 e2       	ldi	r24, 0x23	; 35
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	fc 01       	movw	r30, r24
 178:	80 81       	ld	r24, Z
 17a:	88 2f       	mov	r24, r24
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	a0 e0       	ldi	r26, 0x00	; 0
 180:	b0 e0       	ldi	r27, 0x00	; 0
 182:	9c 01       	movw	r18, r24
 184:	ad 01       	movw	r20, r26
 186:	20 78       	andi	r18, 0x80	; 128
 188:	33 27       	eor	r19, r19
 18a:	44 27       	eor	r20, r20
 18c:	55 27       	eor	r21, r21
 18e:	89 81       	ldd	r24, Y+1	; 0x01
 190:	9a 81       	ldd	r25, Y+2	; 0x02
 192:	ab 81       	ldd	r26, Y+3	; 0x03
 194:	bc 81       	ldd	r27, Y+4	; 0x04
 196:	28 17       	cp	r18, r24
 198:	39 07       	cpc	r19, r25
 19a:	4a 07       	cpc	r20, r26
 19c:	5b 07       	cpc	r21, r27
 19e:	01 f3       	breq	.-64     	; 0x160 <main+0x50>
			PORTB = PORTB ^ 0X20;
 1a0:	85 e2       	ldi	r24, 0x25	; 37
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	25 e2       	ldi	r18, 0x25	; 37
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	f9 01       	movw	r30, r18
 1aa:	30 81       	ld	r19, Z
 1ac:	20 e2       	ldi	r18, 0x20	; 32
 1ae:	23 27       	eor	r18, r19
 1b0:	fc 01       	movw	r30, r24
 1b2:	20 83       	st	Z, r18
			myDelay(500);
 1b4:	64 ef       	ldi	r22, 0xF4	; 244
 1b6:	71 e0       	ldi	r23, 0x01	; 1
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	0e 94 42 00 	call	0x84	; 0x84 <myDelay>
		}
    }
 1c0:	cf cf       	rjmp	.-98     	; 0x160 <main+0x50>

000001c2 <_exit>:
 1c2:	f8 94       	cli

000001c4 <__stop_program>:
 1c4:	ff cf       	rjmp	.-2      	; 0x1c4 <__stop_program>
