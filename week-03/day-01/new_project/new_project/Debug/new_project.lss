
new_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000013c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000794  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006f2  00000000  00000000  00000960  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000238  00000000  00000000  00001052  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000128c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d6  00000000  00000000  000012c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  00001696  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000016de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
   4:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
   8:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
   c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  10:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  14:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  18:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  1c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  20:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  24:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  28:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  2c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  30:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  34:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  38:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  3c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  40:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  44:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  48:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  4c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  50:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  54:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  58:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  5c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  60:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  64:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  68:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d4 e0       	ldi	r29, 0x04	; 4
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61
  78:	0e 94 42 00 	call	0x84	; 0x84 <main>
  7c:	0c 94 72 00 	jmp	0xe4	; 0xe4 <_exit>

00000080 <__bad_interrupt>:
  80:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000084 <main>:

#include <avr/io.h>


int main(void)
{
  84:	cf 93       	push	r28
  86:	df 93       	push	r29
  88:	00 d0       	rcall	.+0      	; 0x8a <main+0x6>
  8a:	cd b7       	in	r28, 0x3d	; 61
  8c:	de b7       	in	r29, 0x3e	; 62
	uint8_t counter = 0;
  8e:	19 82       	std	Y+1, r1	; 0x01
	uint8_t butten_toggling_flag = 0;
  90:	1a 82       	std	Y+2, r1	; 0x02
	
	DDRB = 0x20;
  92:	84 e2       	ldi	r24, 0x24	; 36
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	20 e2       	ldi	r18, 0x20	; 32
  98:	fc 01       	movw	r30, r24
  9a:	20 83       	st	Z, r18
    /* Replace with your application code */
    while (1) 
    {
		if ((PINB & 0x80) && butten_toggling_flag){
  9c:	83 e2       	ldi	r24, 0x23	; 35
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	fc 01       	movw	r30, r24
  a2:	80 81       	ld	r24, Z
  a4:	88 23       	and	r24, r24
  a6:	24 f4       	brge	.+8      	; 0xb0 <main+0x2c>
  a8:	8a 81       	ldd	r24, Y+2	; 0x02
  aa:	88 23       	and	r24, r24
  ac:	09 f0       	breq	.+2      	; 0xb0 <main+0x2c>
				butten_toggling_flag = 0;
  ae:	1a 82       	std	Y+2, r1	; 0x02
			}
		if (!(PINB & 0x80) && !butten_toggling_flag && counter < 5){
  b0:	83 e2       	ldi	r24, 0x23	; 35
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	fc 01       	movw	r30, r24
  b6:	80 81       	ld	r24, Z
  b8:	88 23       	and	r24, r24
  ba:	5c f0       	brlt	.+22     	; 0xd2 <main+0x4e>
  bc:	8a 81       	ldd	r24, Y+2	; 0x02
  be:	88 23       	and	r24, r24
  c0:	41 f4       	brne	.+16     	; 0xd2 <main+0x4e>
  c2:	89 81       	ldd	r24, Y+1	; 0x01
  c4:	85 30       	cpi	r24, 0x05	; 5
  c6:	28 f4       	brcc	.+10     	; 0xd2 <main+0x4e>
			counter++;
  c8:	89 81       	ldd	r24, Y+1	; 0x01
  ca:	8f 5f       	subi	r24, 0xFF	; 255
  cc:	89 83       	std	Y+1, r24	; 0x01
			butten_toggling_flag = 1;
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	8a 83       	std	Y+2, r24	; 0x02
		}
		
		if (counter == 5) PORTB = 0x20;
  d2:	89 81       	ldd	r24, Y+1	; 0x01
  d4:	85 30       	cpi	r24, 0x05	; 5
  d6:	11 f7       	brne	.-60     	; 0x9c <main+0x18>
  d8:	85 e2       	ldi	r24, 0x25	; 37
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	20 e2       	ldi	r18, 0x20	; 32
  de:	fc 01       	movw	r30, r24
  e0:	20 83       	st	Z, r18
    }
  e2:	dc cf       	rjmp	.-72     	; 0x9c <main+0x18>

000000e4 <_exit>:
  e4:	f8 94       	cli

000000e6 <__stop_program>:
  e6:	ff cf       	rjmp	.-2      	; 0xe6 <__stop_program>
